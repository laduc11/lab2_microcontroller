
lab_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< exercise_9
  1 .text         000020cc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080021d8  080021d8  000121d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021fc  080021fc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080021fc  080021fc  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021fc  080021fc  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08002204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000001c  08002220  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002220  000200b8  2**0
=======
  1 .text         000023dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800250c  0800250c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800250c  0800250c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800250c  0800250c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800250c  0800250c  0001250c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002510  08002510  00012510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002514  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000024  08002538  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002538  000200c4  2**0
>>>>>>> local
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
<<<<<<< exercise_9
 12 .debug_info   00008cde  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001906  00000000  00000000  00028d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002a630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002b008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001680b  00000000  00000000  0002b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8c7  00000000  00000000  00042113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fa2  00000000  00000000  0004c9da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ce97c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027b0  00000000  00000000  000ce9d0  2**2
=======
 12 .debug_info   00008f83  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7b  00000000  00000000  00028fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002aa50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a7f  00000000  00000000  0002bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b090  00000000  00000000  00042807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822ca  00000000  00000000  0004d897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cfb61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002854  00000000  00000000  000cfbb4  2**2
>>>>>>> local
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
<<<<<<< exercise_9
 800012c:	080021c0 	.word	0x080021c0
=======
 800012c:	080024d0 	.word	0x080024d0
>>>>>>> local

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
<<<<<<< exercise_9
 8000144:	20000020 	.word	0x20000020
 8000148:	080021c0 	.word	0x080021c0
=======
 8000144:	20000028 	.word	0x20000028
 8000148:	080024d0 	.word	0x080024d0
>>>>>>> local

0800014c <updateClockBuffrer>:
#include "led7seg.h"

int hour = 0, min = 0, sec = 0;

void updateClockBuffrer()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	update_led_buffer(hour, min);
 8000150:	4b04      	ldr	r3, [pc, #16]	; (8000164 <updateClockBuffrer+0x18>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	4a04      	ldr	r2, [pc, #16]	; (8000168 <updateClockBuffrer+0x1c>)
 8000156:	6812      	ldr	r2, [r2, #0]
 8000158:	4611      	mov	r1, r2
 800015a:	4618      	mov	r0, r3
 800015c:	f000 fa5a 	bl	8000614 <update_led_buffer>
}
 8000160:	bf00      	nop
 8000162:	bd80      	pop	{r7, pc}
 8000164:	20000038 	.word	0x20000038
 8000168:	2000003c 	.word	0x2000003c

0800016c <set_clock>:
 * Set time for clock
 * Input: hour, minute, second
 * Output: none
 */
void set_clock(int h, int m, int s)
{
 800016c:	b480      	push	{r7}
 800016e:	b085      	sub	sp, #20
 8000170:	af00      	add	r7, sp, #0
 8000172:	60f8      	str	r0, [r7, #12]
 8000174:	60b9      	str	r1, [r7, #8]
 8000176:	607a      	str	r2, [r7, #4]
	hour = h;
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <set_clock+0x28>)
 800017a:	68fb      	ldr	r3, [r7, #12]
 800017c:	6013      	str	r3, [r2, #0]
	min = m;
 800017e:	4a06      	ldr	r2, [pc, #24]	; (8000198 <set_clock+0x2c>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	6013      	str	r3, [r2, #0]
	sec = s;
 8000184:	4a05      	ldr	r2, [pc, #20]	; (800019c <set_clock+0x30>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	6013      	str	r3, [r2, #0]
}
<<<<<<< exercise_9
 800018a:	bf00      	nop
 800018c:	3714      	adds	r7, #20
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	20000038 	.word	0x20000038
 8000198:	2000003c 	.word	0x2000003c
 800019c:	20000040 	.word	0x20000040

080001a0 <get_hour>:
=======
 8000172:	bf00      	nop
 8000174:	3710      	adds	r7, #16
 8000176:	46bd      	mov	sp, r7
 8000178:	bd80      	pop	{r7, pc}
 800017a:	bf00      	nop
 800017c:	20000040 	.word	0x20000040
 8000180:	20000044 	.word	0x20000044
 8000184:	20000048 	.word	0x20000048

08000188 <get_hour>:
>>>>>>> local
 * Get hour
 * Input: none
 * Output: hour at the moment
 */
int get_hour()
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
	return hour;
 80001a4:	4b02      	ldr	r3, [pc, #8]	; (80001b0 <get_hour+0x10>)
 80001a6:	681b      	ldr	r3, [r3, #0]
}
<<<<<<< exercise_9
 80001a8:	4618      	mov	r0, r3
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc80      	pop	{r7}
 80001ae:	4770      	bx	lr
 80001b0:	20000038 	.word	0x20000038
=======
 8000190:	4618      	mov	r0, r3
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr
 8000198:	20000040 	.word	0x20000040
>>>>>>> local

080001b4 <get_min>:
 * Get minutue
 * Input: none
 * Output: minute at the moment
 */
int get_min()
{
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	return min;
 80001b8:	4b02      	ldr	r3, [pc, #8]	; (80001c4 <get_min+0x10>)
 80001ba:	681b      	ldr	r3, [r3, #0]
}
<<<<<<< exercise_9
 80001bc:	4618      	mov	r0, r3
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	2000003c 	.word	0x2000003c
=======
 80001a4:	4618      	mov	r0, r3
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	20000044 	.word	0x20000044
>>>>>>> local

080001c8 <get_sec>:
 * Get second
 * Input: none
 * Output: second at the moment
 */
int get_sec()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	return sec;
 80001cc:	4b02      	ldr	r3, [pc, #8]	; (80001d8 <get_sec+0x10>)
 80001ce:	681b      	ldr	r3, [r3, #0]
}
<<<<<<< exercise_9
 80001d0:	4618      	mov	r0, r3
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bc80      	pop	{r7}
 80001d6:	4770      	bx	lr
 80001d8:	20000040 	.word	0x20000040

080001dc <display7SEG>:
//#include "clock.h"

int led_buffer[MAX_LED] = {2, 2, 0, 6};

=======
 80001b8:	4618      	mov	r0, r3
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	20000048 	.word	0x20000048

080001c4 <display7SEG>:
 * Display number on 7 segment led
 * Input: number
 * Output: none
 * */
>>>>>>> local
void display7SEG(int num)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b09      	cmp	r3, #9
 80001e8:	f200 8180 	bhi.w	80004ec <display7SEG+0x310>
 80001ec:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <display7SEG+0x18>)
 80001ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f2:	bf00      	nop
 80001f4:	0800021d 	.word	0x0800021d
 80001f8:	08000265 	.word	0x08000265
 80001fc:	080002ad 	.word	0x080002ad
 8000200:	080002f5 	.word	0x080002f5
 8000204:	0800033d 	.word	0x0800033d
 8000208:	08000385 	.word	0x08000385
 800020c:	080003cd 	.word	0x080003cd
 8000210:	08000415 	.word	0x08000415
 8000214:	0800045d 	.word	0x0800045d
 8000218:	080004a5 	.word	0x080004a5
	switch (num)
	{
	case 0:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
<<<<<<< exercise_9
 800021c:	2200      	movs	r2, #0
 800021e:	2101      	movs	r1, #1
 8000220:	48c6      	ldr	r0, [pc, #792]	; (800053c <display7SEG+0x360>)
 8000222:	f000 ffab 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2102      	movs	r1, #2
 800022a:	48c4      	ldr	r0, [pc, #784]	; (800053c <display7SEG+0x360>)
 800022c:	f000 ffa6 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000230:	2200      	movs	r2, #0
 8000232:	2104      	movs	r1, #4
 8000234:	48c1      	ldr	r0, [pc, #772]	; (800053c <display7SEG+0x360>)
 8000236:	f000 ffa1 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2108      	movs	r1, #8
 800023e:	48bf      	ldr	r0, [pc, #764]	; (800053c <display7SEG+0x360>)
 8000240:	f000 ff9c 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2110      	movs	r1, #16
 8000248:	48bc      	ldr	r0, [pc, #752]	; (800053c <display7SEG+0x360>)
 800024a:	f000 ff97 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	2120      	movs	r1, #32
 8000252:	48ba      	ldr	r0, [pc, #744]	; (800053c <display7SEG+0x360>)
 8000254:	f000 ff92 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 8000258:	2201      	movs	r2, #1
 800025a:	2140      	movs	r1, #64	; 0x40
 800025c:	48b7      	ldr	r0, [pc, #732]	; (800053c <display7SEG+0x360>)
 800025e:	f000 ff8d 	bl	800117c <HAL_GPIO_WritePin>
=======
 8000204:	2200      	movs	r2, #0
 8000206:	2101      	movs	r1, #1
 8000208:	48c6      	ldr	r0, [pc, #792]	; (8000524 <display7SEG+0x360>)
 800020a:	f001 f93f 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800020e:	2200      	movs	r2, #0
 8000210:	2102      	movs	r1, #2
 8000212:	48c4      	ldr	r0, [pc, #784]	; (8000524 <display7SEG+0x360>)
 8000214:	f001 f93a 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	2104      	movs	r1, #4
 800021c:	48c1      	ldr	r0, [pc, #772]	; (8000524 <display7SEG+0x360>)
 800021e:	f001 f935 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000222:	2200      	movs	r2, #0
 8000224:	2108      	movs	r1, #8
 8000226:	48bf      	ldr	r0, [pc, #764]	; (8000524 <display7SEG+0x360>)
 8000228:	f001 f930 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 800022c:	2200      	movs	r2, #0
 800022e:	2110      	movs	r1, #16
 8000230:	48bc      	ldr	r0, [pc, #752]	; (8000524 <display7SEG+0x360>)
 8000232:	f001 f92b 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	2120      	movs	r1, #32
 800023a:	48ba      	ldr	r0, [pc, #744]	; (8000524 <display7SEG+0x360>)
 800023c:	f001 f926 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 8000240:	2201      	movs	r2, #1
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	48b7      	ldr	r0, [pc, #732]	; (8000524 <display7SEG+0x360>)
 8000246:	f001 f921 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 8000262:	e167      	b.n	8000534 <display7SEG+0x358>
	case 1:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
<<<<<<< exercise_9
 8000264:	2201      	movs	r2, #1
 8000266:	2101      	movs	r1, #1
 8000268:	48b4      	ldr	r0, [pc, #720]	; (800053c <display7SEG+0x360>)
 800026a:	f000 ff87 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2102      	movs	r1, #2
 8000272:	48b2      	ldr	r0, [pc, #712]	; (800053c <display7SEG+0x360>)
 8000274:	f000 ff82 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2104      	movs	r1, #4
 800027c:	48af      	ldr	r0, [pc, #700]	; (800053c <display7SEG+0x360>)
 800027e:	f000 ff7d 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8000282:	2201      	movs	r2, #1
 8000284:	2108      	movs	r1, #8
 8000286:	48ad      	ldr	r0, [pc, #692]	; (800053c <display7SEG+0x360>)
 8000288:	f000 ff78 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2110      	movs	r1, #16
 8000290:	48aa      	ldr	r0, [pc, #680]	; (800053c <display7SEG+0x360>)
 8000292:	f000 ff73 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2120      	movs	r1, #32
 800029a:	48a8      	ldr	r0, [pc, #672]	; (800053c <display7SEG+0x360>)
 800029c:	f000 ff6e 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2140      	movs	r1, #64	; 0x40
 80002a4:	48a5      	ldr	r0, [pc, #660]	; (800053c <display7SEG+0x360>)
 80002a6:	f000 ff69 	bl	800117c <HAL_GPIO_WritePin>
=======
 800024c:	2201      	movs	r2, #1
 800024e:	2101      	movs	r1, #1
 8000250:	48b4      	ldr	r0, [pc, #720]	; (8000524 <display7SEG+0x360>)
 8000252:	f001 f91b 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2102      	movs	r1, #2
 800025a:	48b2      	ldr	r0, [pc, #712]	; (8000524 <display7SEG+0x360>)
 800025c:	f001 f916 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	2104      	movs	r1, #4
 8000264:	48af      	ldr	r0, [pc, #700]	; (8000524 <display7SEG+0x360>)
 8000266:	f001 f911 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 800026a:	2201      	movs	r2, #1
 800026c:	2108      	movs	r1, #8
 800026e:	48ad      	ldr	r0, [pc, #692]	; (8000524 <display7SEG+0x360>)
 8000270:	f001 f90c 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	2110      	movs	r1, #16
 8000278:	48aa      	ldr	r0, [pc, #680]	; (8000524 <display7SEG+0x360>)
 800027a:	f001 f907 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 800027e:	2201      	movs	r2, #1
 8000280:	2120      	movs	r1, #32
 8000282:	48a8      	ldr	r0, [pc, #672]	; (8000524 <display7SEG+0x360>)
 8000284:	f001 f902 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2140      	movs	r1, #64	; 0x40
 800028c:	48a5      	ldr	r0, [pc, #660]	; (8000524 <display7SEG+0x360>)
 800028e:	f001 f8fd 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 80002aa:	e143      	b.n	8000534 <display7SEG+0x358>
	case 2:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
<<<<<<< exercise_9
 80002ac:	2200      	movs	r2, #0
 80002ae:	2101      	movs	r1, #1
 80002b0:	48a2      	ldr	r0, [pc, #648]	; (800053c <display7SEG+0x360>)
 80002b2:	f000 ff63 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	48a0      	ldr	r0, [pc, #640]	; (800053c <display7SEG+0x360>)
 80002bc:	f000 ff5e 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2104      	movs	r1, #4
 80002c4:	489d      	ldr	r0, [pc, #628]	; (800053c <display7SEG+0x360>)
 80002c6:	f000 ff59 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	489b      	ldr	r0, [pc, #620]	; (800053c <display7SEG+0x360>)
 80002d0:	f000 ff54 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2110      	movs	r1, #16
 80002d8:	4898      	ldr	r0, [pc, #608]	; (800053c <display7SEG+0x360>)
 80002da:	f000 ff4f 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 80002de:	2201      	movs	r2, #1
 80002e0:	2120      	movs	r1, #32
 80002e2:	4896      	ldr	r0, [pc, #600]	; (800053c <display7SEG+0x360>)
 80002e4:	f000 ff4a 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	4893      	ldr	r0, [pc, #588]	; (800053c <display7SEG+0x360>)
 80002ee:	f000 ff45 	bl	800117c <HAL_GPIO_WritePin>
=======
 8000294:	2200      	movs	r2, #0
 8000296:	2101      	movs	r1, #1
 8000298:	48a2      	ldr	r0, [pc, #648]	; (8000524 <display7SEG+0x360>)
 800029a:	f001 f8f7 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2102      	movs	r1, #2
 80002a2:	48a0      	ldr	r0, [pc, #640]	; (8000524 <display7SEG+0x360>)
 80002a4:	f001 f8f2 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2104      	movs	r1, #4
 80002ac:	489d      	ldr	r0, [pc, #628]	; (8000524 <display7SEG+0x360>)
 80002ae:	f001 f8ed 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	2108      	movs	r1, #8
 80002b6:	489b      	ldr	r0, [pc, #620]	; (8000524 <display7SEG+0x360>)
 80002b8:	f001 f8e8 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	2110      	movs	r1, #16
 80002c0:	4898      	ldr	r0, [pc, #608]	; (8000524 <display7SEG+0x360>)
 80002c2:	f001 f8e3 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2120      	movs	r1, #32
 80002ca:	4896      	ldr	r0, [pc, #600]	; (8000524 <display7SEG+0x360>)
 80002cc:	f001 f8de 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2140      	movs	r1, #64	; 0x40
 80002d4:	4893      	ldr	r0, [pc, #588]	; (8000524 <display7SEG+0x360>)
 80002d6:	f001 f8d9 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 80002f2:	e11f      	b.n	8000534 <display7SEG+0x358>
	case 3:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
<<<<<<< exercise_9
 80002f4:	2200      	movs	r2, #0
 80002f6:	2101      	movs	r1, #1
 80002f8:	4890      	ldr	r0, [pc, #576]	; (800053c <display7SEG+0x360>)
 80002fa:	f000 ff3f 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2102      	movs	r1, #2
 8000302:	488e      	ldr	r0, [pc, #568]	; (800053c <display7SEG+0x360>)
 8000304:	f000 ff3a 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	488b      	ldr	r0, [pc, #556]	; (800053c <display7SEG+0x360>)
 800030e:	f000 ff35 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2108      	movs	r1, #8
 8000316:	4889      	ldr	r0, [pc, #548]	; (800053c <display7SEG+0x360>)
 8000318:	f000 ff30 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2110      	movs	r1, #16
 8000320:	4886      	ldr	r0, [pc, #536]	; (800053c <display7SEG+0x360>)
 8000322:	f000 ff2b 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 8000326:	2201      	movs	r2, #1
 8000328:	2120      	movs	r1, #32
 800032a:	4884      	ldr	r0, [pc, #528]	; (800053c <display7SEG+0x360>)
 800032c:	f000 ff26 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2140      	movs	r1, #64	; 0x40
 8000334:	4881      	ldr	r0, [pc, #516]	; (800053c <display7SEG+0x360>)
 8000336:	f000 ff21 	bl	800117c <HAL_GPIO_WritePin>
=======
 80002dc:	2200      	movs	r2, #0
 80002de:	2101      	movs	r1, #1
 80002e0:	4890      	ldr	r0, [pc, #576]	; (8000524 <display7SEG+0x360>)
 80002e2:	f001 f8d3 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80002e6:	2200      	movs	r2, #0
 80002e8:	2102      	movs	r1, #2
 80002ea:	488e      	ldr	r0, [pc, #568]	; (8000524 <display7SEG+0x360>)
 80002ec:	f001 f8ce 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2104      	movs	r1, #4
 80002f4:	488b      	ldr	r0, [pc, #556]	; (8000524 <display7SEG+0x360>)
 80002f6:	f001 f8c9 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80002fa:	2200      	movs	r2, #0
 80002fc:	2108      	movs	r1, #8
 80002fe:	4889      	ldr	r0, [pc, #548]	; (8000524 <display7SEG+0x360>)
 8000300:	f001 f8c4 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 8000304:	2201      	movs	r2, #1
 8000306:	2110      	movs	r1, #16
 8000308:	4886      	ldr	r0, [pc, #536]	; (8000524 <display7SEG+0x360>)
 800030a:	f001 f8bf 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 800030e:	2201      	movs	r2, #1
 8000310:	2120      	movs	r1, #32
 8000312:	4884      	ldr	r0, [pc, #528]	; (8000524 <display7SEG+0x360>)
 8000314:	f001 f8ba 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000318:	2200      	movs	r2, #0
 800031a:	2140      	movs	r1, #64	; 0x40
 800031c:	4881      	ldr	r0, [pc, #516]	; (8000524 <display7SEG+0x360>)
 800031e:	f001 f8b5 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 800033a:	e0fb      	b.n	8000534 <display7SEG+0x358>
	case 4:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
<<<<<<< exercise_9
 800033c:	2201      	movs	r2, #1
 800033e:	2101      	movs	r1, #1
 8000340:	487e      	ldr	r0, [pc, #504]	; (800053c <display7SEG+0x360>)
 8000342:	f000 ff1b 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2102      	movs	r1, #2
 800034a:	487c      	ldr	r0, [pc, #496]	; (800053c <display7SEG+0x360>)
 800034c:	f000 ff16 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2104      	movs	r1, #4
 8000354:	4879      	ldr	r0, [pc, #484]	; (800053c <display7SEG+0x360>)
 8000356:	f000 ff11 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 800035a:	2201      	movs	r2, #1
 800035c:	2108      	movs	r1, #8
 800035e:	4877      	ldr	r0, [pc, #476]	; (800053c <display7SEG+0x360>)
 8000360:	f000 ff0c 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 8000364:	2201      	movs	r2, #1
 8000366:	2110      	movs	r1, #16
 8000368:	4874      	ldr	r0, [pc, #464]	; (800053c <display7SEG+0x360>)
 800036a:	f000 ff07 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	4872      	ldr	r0, [pc, #456]	; (800053c <display7SEG+0x360>)
 8000374:	f000 ff02 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2140      	movs	r1, #64	; 0x40
 800037c:	486f      	ldr	r0, [pc, #444]	; (800053c <display7SEG+0x360>)
 800037e:	f000 fefd 	bl	800117c <HAL_GPIO_WritePin>
=======
 8000324:	2201      	movs	r2, #1
 8000326:	2101      	movs	r1, #1
 8000328:	487e      	ldr	r0, [pc, #504]	; (8000524 <display7SEG+0x360>)
 800032a:	f001 f8af 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2102      	movs	r1, #2
 8000332:	487c      	ldr	r0, [pc, #496]	; (8000524 <display7SEG+0x360>)
 8000334:	f001 f8aa 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2104      	movs	r1, #4
 800033c:	4879      	ldr	r0, [pc, #484]	; (8000524 <display7SEG+0x360>)
 800033e:	f001 f8a5 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8000342:	2201      	movs	r2, #1
 8000344:	2108      	movs	r1, #8
 8000346:	4877      	ldr	r0, [pc, #476]	; (8000524 <display7SEG+0x360>)
 8000348:	f001 f8a0 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 800034c:	2201      	movs	r2, #1
 800034e:	2110      	movs	r1, #16
 8000350:	4874      	ldr	r0, [pc, #464]	; (8000524 <display7SEG+0x360>)
 8000352:	f001 f89b 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2120      	movs	r1, #32
 800035a:	4872      	ldr	r0, [pc, #456]	; (8000524 <display7SEG+0x360>)
 800035c:	f001 f896 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2140      	movs	r1, #64	; 0x40
 8000364:	486f      	ldr	r0, [pc, #444]	; (8000524 <display7SEG+0x360>)
 8000366:	f001 f891 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 8000382:	e0d7      	b.n	8000534 <display7SEG+0x358>
	case 5:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
<<<<<<< exercise_9
 8000384:	2200      	movs	r2, #0
 8000386:	2101      	movs	r1, #1
 8000388:	486c      	ldr	r0, [pc, #432]	; (800053c <display7SEG+0x360>)
 800038a:	f000 fef7 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 800038e:	2201      	movs	r2, #1
 8000390:	2102      	movs	r1, #2
 8000392:	486a      	ldr	r0, [pc, #424]	; (800053c <display7SEG+0x360>)
 8000394:	f000 fef2 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2104      	movs	r1, #4
 800039c:	4867      	ldr	r0, [pc, #412]	; (800053c <display7SEG+0x360>)
 800039e:	f000 feed 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2108      	movs	r1, #8
 80003a6:	4865      	ldr	r0, [pc, #404]	; (800053c <display7SEG+0x360>)
 80003a8:	f000 fee8 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2110      	movs	r1, #16
 80003b0:	4862      	ldr	r0, [pc, #392]	; (800053c <display7SEG+0x360>)
 80003b2:	f000 fee3 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 80003b6:	2200      	movs	r2, #0
 80003b8:	2120      	movs	r1, #32
 80003ba:	4860      	ldr	r0, [pc, #384]	; (800053c <display7SEG+0x360>)
 80003bc:	f000 fede 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	485d      	ldr	r0, [pc, #372]	; (800053c <display7SEG+0x360>)
 80003c6:	f000 fed9 	bl	800117c <HAL_GPIO_WritePin>
=======
 800036c:	2200      	movs	r2, #0
 800036e:	2101      	movs	r1, #1
 8000370:	486c      	ldr	r0, [pc, #432]	; (8000524 <display7SEG+0x360>)
 8000372:	f001 f88b 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 8000376:	2201      	movs	r2, #1
 8000378:	2102      	movs	r1, #2
 800037a:	486a      	ldr	r0, [pc, #424]	; (8000524 <display7SEG+0x360>)
 800037c:	f001 f886 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2104      	movs	r1, #4
 8000384:	4867      	ldr	r0, [pc, #412]	; (8000524 <display7SEG+0x360>)
 8000386:	f001 f881 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	2108      	movs	r1, #8
 800038e:	4865      	ldr	r0, [pc, #404]	; (8000524 <display7SEG+0x360>)
 8000390:	f001 f87c 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2110      	movs	r1, #16
 8000398:	4862      	ldr	r0, [pc, #392]	; (8000524 <display7SEG+0x360>)
 800039a:	f001 f877 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2120      	movs	r1, #32
 80003a2:	4860      	ldr	r0, [pc, #384]	; (8000524 <display7SEG+0x360>)
 80003a4:	f001 f872 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2140      	movs	r1, #64	; 0x40
 80003ac:	485d      	ldr	r0, [pc, #372]	; (8000524 <display7SEG+0x360>)
 80003ae:	f001 f86d 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 80003ca:	e0b3      	b.n	8000534 <display7SEG+0x358>
	case 6:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
<<<<<<< exercise_9
 80003cc:	2200      	movs	r2, #0
 80003ce:	2101      	movs	r1, #1
 80003d0:	485a      	ldr	r0, [pc, #360]	; (800053c <display7SEG+0x360>)
 80003d2:	f000 fed3 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 80003d6:	2201      	movs	r2, #1
 80003d8:	2102      	movs	r1, #2
 80003da:	4858      	ldr	r0, [pc, #352]	; (800053c <display7SEG+0x360>)
 80003dc:	f000 fece 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2104      	movs	r1, #4
 80003e4:	4855      	ldr	r0, [pc, #340]	; (800053c <display7SEG+0x360>)
 80003e6:	f000 fec9 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2108      	movs	r1, #8
 80003ee:	4853      	ldr	r0, [pc, #332]	; (800053c <display7SEG+0x360>)
 80003f0:	f000 fec4 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2110      	movs	r1, #16
 80003f8:	4850      	ldr	r0, [pc, #320]	; (800053c <display7SEG+0x360>)
 80003fa:	f000 febf 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2120      	movs	r1, #32
 8000402:	484e      	ldr	r0, [pc, #312]	; (800053c <display7SEG+0x360>)
 8000404:	f000 feba 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2140      	movs	r1, #64	; 0x40
 800040c:	484b      	ldr	r0, [pc, #300]	; (800053c <display7SEG+0x360>)
 800040e:	f000 feb5 	bl	800117c <HAL_GPIO_WritePin>
=======
 80003b4:	2200      	movs	r2, #0
 80003b6:	2101      	movs	r1, #1
 80003b8:	485a      	ldr	r0, [pc, #360]	; (8000524 <display7SEG+0x360>)
 80003ba:	f001 f867 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	2102      	movs	r1, #2
 80003c2:	4858      	ldr	r0, [pc, #352]	; (8000524 <display7SEG+0x360>)
 80003c4:	f001 f862 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2104      	movs	r1, #4
 80003cc:	4855      	ldr	r0, [pc, #340]	; (8000524 <display7SEG+0x360>)
 80003ce:	f001 f85d 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80003d2:	2200      	movs	r2, #0
 80003d4:	2108      	movs	r1, #8
 80003d6:	4853      	ldr	r0, [pc, #332]	; (8000524 <display7SEG+0x360>)
 80003d8:	f001 f858 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2110      	movs	r1, #16
 80003e0:	4850      	ldr	r0, [pc, #320]	; (8000524 <display7SEG+0x360>)
 80003e2:	f001 f853 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	2120      	movs	r1, #32
 80003ea:	484e      	ldr	r0, [pc, #312]	; (8000524 <display7SEG+0x360>)
 80003ec:	f001 f84e 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2140      	movs	r1, #64	; 0x40
 80003f4:	484b      	ldr	r0, [pc, #300]	; (8000524 <display7SEG+0x360>)
 80003f6:	f001 f849 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 8000412:	e08f      	b.n	8000534 <display7SEG+0x358>
	case 7:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
<<<<<<< exercise_9
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	4848      	ldr	r0, [pc, #288]	; (800053c <display7SEG+0x360>)
 800041a:	f000 feaf 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	4846      	ldr	r0, [pc, #280]	; (800053c <display7SEG+0x360>)
 8000424:	f000 feaa 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	4843      	ldr	r0, [pc, #268]	; (800053c <display7SEG+0x360>)
 800042e:	f000 fea5 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 8000432:	2201      	movs	r2, #1
 8000434:	2108      	movs	r1, #8
 8000436:	4841      	ldr	r0, [pc, #260]	; (800053c <display7SEG+0x360>)
 8000438:	f000 fea0 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2110      	movs	r1, #16
 8000440:	483e      	ldr	r0, [pc, #248]	; (800053c <display7SEG+0x360>)
 8000442:	f000 fe9b 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 8000446:	2201      	movs	r2, #1
 8000448:	2120      	movs	r1, #32
 800044a:	483c      	ldr	r0, [pc, #240]	; (800053c <display7SEG+0x360>)
 800044c:	f000 fe96 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2140      	movs	r1, #64	; 0x40
 8000454:	4839      	ldr	r0, [pc, #228]	; (800053c <display7SEG+0x360>)
 8000456:	f000 fe91 	bl	800117c <HAL_GPIO_WritePin>
=======
 80003fc:	2200      	movs	r2, #0
 80003fe:	2101      	movs	r1, #1
 8000400:	4848      	ldr	r0, [pc, #288]	; (8000524 <display7SEG+0x360>)
 8000402:	f001 f843 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2102      	movs	r1, #2
 800040a:	4846      	ldr	r0, [pc, #280]	; (8000524 <display7SEG+0x360>)
 800040c:	f001 f83e 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2104      	movs	r1, #4
 8000414:	4843      	ldr	r0, [pc, #268]	; (8000524 <display7SEG+0x360>)
 8000416:	f001 f839 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 800041a:	2201      	movs	r2, #1
 800041c:	2108      	movs	r1, #8
 800041e:	4841      	ldr	r0, [pc, #260]	; (8000524 <display7SEG+0x360>)
 8000420:	f001 f834 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 8000424:	2201      	movs	r2, #1
 8000426:	2110      	movs	r1, #16
 8000428:	483e      	ldr	r0, [pc, #248]	; (8000524 <display7SEG+0x360>)
 800042a:	f001 f82f 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2120      	movs	r1, #32
 8000432:	483c      	ldr	r0, [pc, #240]	; (8000524 <display7SEG+0x360>)
 8000434:	f001 f82a 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 8000438:	2201      	movs	r2, #1
 800043a:	2140      	movs	r1, #64	; 0x40
 800043c:	4839      	ldr	r0, [pc, #228]	; (8000524 <display7SEG+0x360>)
 800043e:	f001 f825 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 800045a:	e06b      	b.n	8000534 <display7SEG+0x358>
	case 8:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
<<<<<<< exercise_9
 800045c:	2200      	movs	r2, #0
 800045e:	2101      	movs	r1, #1
 8000460:	4836      	ldr	r0, [pc, #216]	; (800053c <display7SEG+0x360>)
 8000462:	f000 fe8b 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2102      	movs	r1, #2
 800046a:	4834      	ldr	r0, [pc, #208]	; (800053c <display7SEG+0x360>)
 800046c:	f000 fe86 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	2104      	movs	r1, #4
 8000474:	4831      	ldr	r0, [pc, #196]	; (800053c <display7SEG+0x360>)
 8000476:	f000 fe81 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 800047a:	2200      	movs	r2, #0
 800047c:	2108      	movs	r1, #8
 800047e:	482f      	ldr	r0, [pc, #188]	; (800053c <display7SEG+0x360>)
 8000480:	f000 fe7c 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2110      	movs	r1, #16
 8000488:	482c      	ldr	r0, [pc, #176]	; (800053c <display7SEG+0x360>)
 800048a:	f000 fe77 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 800048e:	2200      	movs	r2, #0
 8000490:	2120      	movs	r1, #32
 8000492:	482a      	ldr	r0, [pc, #168]	; (800053c <display7SEG+0x360>)
 8000494:	f000 fe72 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000498:	2200      	movs	r2, #0
 800049a:	2140      	movs	r1, #64	; 0x40
 800049c:	4827      	ldr	r0, [pc, #156]	; (800053c <display7SEG+0x360>)
 800049e:	f000 fe6d 	bl	800117c <HAL_GPIO_WritePin>
=======
 8000444:	2200      	movs	r2, #0
 8000446:	2101      	movs	r1, #1
 8000448:	4836      	ldr	r0, [pc, #216]	; (8000524 <display7SEG+0x360>)
 800044a:	f001 f81f 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2102      	movs	r1, #2
 8000452:	4834      	ldr	r0, [pc, #208]	; (8000524 <display7SEG+0x360>)
 8000454:	f001 f81a 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	2104      	movs	r1, #4
 800045c:	4831      	ldr	r0, [pc, #196]	; (8000524 <display7SEG+0x360>)
 800045e:	f001 f815 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 8000462:	2200      	movs	r2, #0
 8000464:	2108      	movs	r1, #8
 8000466:	482f      	ldr	r0, [pc, #188]	; (8000524 <display7SEG+0x360>)
 8000468:	f001 f810 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	2110      	movs	r1, #16
 8000470:	482c      	ldr	r0, [pc, #176]	; (8000524 <display7SEG+0x360>)
 8000472:	f001 f80b 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	2120      	movs	r1, #32
 800047a:	482a      	ldr	r0, [pc, #168]	; (8000524 <display7SEG+0x360>)
 800047c:	f001 f806 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 8000480:	2200      	movs	r2, #0
 8000482:	2140      	movs	r1, #64	; 0x40
 8000484:	4827      	ldr	r0, [pc, #156]	; (8000524 <display7SEG+0x360>)
 8000486:	f001 f801 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 80004a2:	e047      	b.n	8000534 <display7SEG+0x358>
	case 9:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, RESET);
<<<<<<< exercise_9
 80004a4:	2200      	movs	r2, #0
 80004a6:	2101      	movs	r1, #1
 80004a8:	4824      	ldr	r0, [pc, #144]	; (800053c <display7SEG+0x360>)
 80004aa:	f000 fe67 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2102      	movs	r1, #2
 80004b2:	4822      	ldr	r0, [pc, #136]	; (800053c <display7SEG+0x360>)
 80004b4:	f000 fe62 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2104      	movs	r1, #4
 80004bc:	481f      	ldr	r0, [pc, #124]	; (800053c <display7SEG+0x360>)
 80004be:	f000 fe5d 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2108      	movs	r1, #8
 80004c6:	481d      	ldr	r0, [pc, #116]	; (800053c <display7SEG+0x360>)
 80004c8:	f000 fe58 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2110      	movs	r1, #16
 80004d0:	481a      	ldr	r0, [pc, #104]	; (800053c <display7SEG+0x360>)
 80004d2:	f000 fe53 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2120      	movs	r1, #32
 80004da:	4818      	ldr	r0, [pc, #96]	; (800053c <display7SEG+0x360>)
 80004dc:	f000 fe4e 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2140      	movs	r1, #64	; 0x40
 80004e4:	4815      	ldr	r0, [pc, #84]	; (800053c <display7SEG+0x360>)
 80004e6:	f000 fe49 	bl	800117c <HAL_GPIO_WritePin>
=======
 800048c:	2200      	movs	r2, #0
 800048e:	2101      	movs	r1, #1
 8000490:	4824      	ldr	r0, [pc, #144]	; (8000524 <display7SEG+0x360>)
 8000492:	f000 fffb 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, RESET);
 8000496:	2200      	movs	r2, #0
 8000498:	2102      	movs	r1, #2
 800049a:	4822      	ldr	r0, [pc, #136]	; (8000524 <display7SEG+0x360>)
 800049c:	f000 fff6 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, RESET);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2104      	movs	r1, #4
 80004a4:	481f      	ldr	r0, [pc, #124]	; (8000524 <display7SEG+0x360>)
 80004a6:	f000 fff1 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	2108      	movs	r1, #8
 80004ae:	481d      	ldr	r0, [pc, #116]	; (8000524 <display7SEG+0x360>)
 80004b0:	f000 ffec 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 80004b4:	2201      	movs	r2, #1
 80004b6:	2110      	movs	r1, #16
 80004b8:	481a      	ldr	r0, [pc, #104]	; (8000524 <display7SEG+0x360>)
 80004ba:	f000 ffe7 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, RESET);
 80004be:	2200      	movs	r2, #0
 80004c0:	2120      	movs	r1, #32
 80004c2:	4818      	ldr	r0, [pc, #96]	; (8000524 <display7SEG+0x360>)
 80004c4:	f000 ffe2 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	2140      	movs	r1, #64	; 0x40
 80004cc:	4815      	ldr	r0, [pc, #84]	; (8000524 <display7SEG+0x360>)
 80004ce:	f000 ffdd 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 80004ea:	e023      	b.n	8000534 <display7SEG+0x358>
	default:
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, SET);
<<<<<<< exercise_9
 80004ec:	2201      	movs	r2, #1
 80004ee:	2101      	movs	r1, #1
 80004f0:	4812      	ldr	r0, [pc, #72]	; (800053c <display7SEG+0x360>)
 80004f2:	f000 fe43 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2102      	movs	r1, #2
 80004fa:	4810      	ldr	r0, [pc, #64]	; (800053c <display7SEG+0x360>)
 80004fc:	f000 fe3e 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2104      	movs	r1, #4
 8000504:	480d      	ldr	r0, [pc, #52]	; (800053c <display7SEG+0x360>)
 8000506:	f000 fe39 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 800050a:	2201      	movs	r2, #1
 800050c:	2108      	movs	r1, #8
 800050e:	480b      	ldr	r0, [pc, #44]	; (800053c <display7SEG+0x360>)
 8000510:	f000 fe34 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 8000514:	2201      	movs	r2, #1
 8000516:	2110      	movs	r1, #16
 8000518:	4808      	ldr	r0, [pc, #32]	; (800053c <display7SEG+0x360>)
 800051a:	f000 fe2f 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 800051e:	2201      	movs	r2, #1
 8000520:	2120      	movs	r1, #32
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <display7SEG+0x360>)
 8000524:	f000 fe2a 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 8000528:	2201      	movs	r2, #1
 800052a:	2140      	movs	r1, #64	; 0x40
 800052c:	4803      	ldr	r0, [pc, #12]	; (800053c <display7SEG+0x360>)
 800052e:	f000 fe25 	bl	800117c <HAL_GPIO_WritePin>
=======
 80004d4:	2201      	movs	r2, #1
 80004d6:	2101      	movs	r1, #1
 80004d8:	4812      	ldr	r0, [pc, #72]	; (8000524 <display7SEG+0x360>)
 80004da:	f000 ffd7 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2102      	movs	r1, #2
 80004e2:	4810      	ldr	r0, [pc, #64]	; (8000524 <display7SEG+0x360>)
 80004e4:	f000 ffd2 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2104      	movs	r1, #4
 80004ec:	480d      	ldr	r0, [pc, #52]	; (8000524 <display7SEG+0x360>)
 80004ee:	f000 ffcd 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2108      	movs	r1, #8
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <display7SEG+0x360>)
 80004f8:	f000 ffc8 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2110      	movs	r1, #16
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <display7SEG+0x360>)
 8000502:	f000 ffc3 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2120      	movs	r1, #32
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <display7SEG+0x360>)
 800050c:	f000 ffbe 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, SET);
 8000510:	2201      	movs	r2, #1
 8000512:	2140      	movs	r1, #64	; 0x40
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <display7SEG+0x360>)
 8000516:	f000 ffb9 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 8000532:	bf00      	nop
	}
}
 8000534:	bf00      	nop
 8000536:	3708      	adds	r7, #8
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40010c00 	.word	0x40010c00

08000540 <set_led7seg>:
void set_led7seg(int idx)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b03      	cmp	r3, #3
 800054c:	d824      	bhi.n	8000598 <set_led7seg+0x58>
 800054e:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <set_led7seg+0x14>)
 8000550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000554:	08000565 	.word	0x08000565
 8000558:	08000571 	.word	0x08000571
 800055c:	0800057d 	.word	0x0800057d
 8000560:	0800058b 	.word	0x0800058b
	switch(idx)
	{
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
<<<<<<< exercise_9
 8000564:	2200      	movs	r2, #0
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4819      	ldr	r0, [pc, #100]	; (80005d0 <set_led7seg+0x90>)
 800056a:	f000 fe07 	bl	800117c <HAL_GPIO_WritePin>
=======
 800054c:	2200      	movs	r2, #0
 800054e:	2140      	movs	r1, #64	; 0x40
 8000550:	4819      	ldr	r0, [pc, #100]	; (80005b8 <set_led7seg+0x90>)
 8000552:	f000 ff9b 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 800056e:	e02a      	b.n	80005c6 <set_led7seg+0x86>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
<<<<<<< exercise_9
 8000570:	2200      	movs	r2, #0
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	4816      	ldr	r0, [pc, #88]	; (80005d0 <set_led7seg+0x90>)
 8000576:	f000 fe01 	bl	800117c <HAL_GPIO_WritePin>
=======
 8000558:	2200      	movs	r2, #0
 800055a:	2180      	movs	r1, #128	; 0x80
 800055c:	4816      	ldr	r0, [pc, #88]	; (80005b8 <set_led7seg+0x90>)
 800055e:	f000 ff95 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 800057a:	e024      	b.n	80005c6 <set_led7seg+0x86>
	case 2:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
<<<<<<< exercise_9
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000582:	4813      	ldr	r0, [pc, #76]	; (80005d0 <set_led7seg+0x90>)
 8000584:	f000 fdfa 	bl	800117c <HAL_GPIO_WritePin>
=======
 8000564:	2200      	movs	r2, #0
 8000566:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056a:	4813      	ldr	r0, [pc, #76]	; (80005b8 <set_led7seg+0x90>)
 800056c:	f000 ff8e 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 8000588:	e01d      	b.n	80005c6 <set_led7seg+0x86>
	case 3:
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
<<<<<<< exercise_9
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000590:	480f      	ldr	r0, [pc, #60]	; (80005d0 <set_led7seg+0x90>)
 8000592:	f000 fdf3 	bl	800117c <HAL_GPIO_WritePin>
=======
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000578:	480f      	ldr	r0, [pc, #60]	; (80005b8 <set_led7seg+0x90>)
 800057a:	f000 ff87 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 8000596:	e016      	b.n	80005c6 <set_led7seg+0x86>
	default:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
<<<<<<< exercise_9
 8000598:	2201      	movs	r2, #1
 800059a:	2140      	movs	r1, #64	; 0x40
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <set_led7seg+0x90>)
 800059e:	f000 fded 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	480a      	ldr	r0, [pc, #40]	; (80005d0 <set_led7seg+0x90>)
 80005a8:	f000 fde8 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005b2:	4807      	ldr	r0, [pc, #28]	; (80005d0 <set_led7seg+0x90>)
 80005b4:	f000 fde2 	bl	800117c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <set_led7seg+0x90>)
 80005c0:	f000 fddc 	bl	800117c <HAL_GPIO_WritePin>
=======
 8000580:	2201      	movs	r2, #1
 8000582:	2140      	movs	r1, #64	; 0x40
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <set_led7seg+0x90>)
 8000586:	f000 ff81 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <set_led7seg+0x90>)
 8000590:	f000 ff7c 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 7180 	mov.w	r1, #256	; 0x100
 800059a:	4807      	ldr	r0, [pc, #28]	; (80005b8 <set_led7seg+0x90>)
 800059c:	f000 ff76 	bl	800148c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a6:	4804      	ldr	r0, [pc, #16]	; (80005b8 <set_led7seg+0x90>)
 80005a8:	f000 ff70 	bl	800148c <HAL_GPIO_WritePin>
>>>>>>> local
		break;
 80005c4:	bf00      	nop
	}
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40010800 	.word	0x40010800

080005d4 <update7SEG>:
void update7SEG(int idx)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if (idx >= MAX_LED || idx < 0)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	dc11      	bgt.n	8000606 <update7SEG+0x32>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	db0e      	blt.n	8000606 <update7SEG+0x32>
		return;
	set_led7seg(-1);
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f7ff ffa8 	bl	8000540 <set_led7seg>
	set_led7seg(idx);
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f7ff ffa5 	bl	8000540 <set_led7seg>
	display7SEG(led_buffer[idx]);
 80005f6:	4a06      	ldr	r2, [pc, #24]	; (8000610 <update7SEG+0x3c>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fdec 	bl	80001dc <display7SEG>
 8000604:	e000      	b.n	8000608 <update7SEG+0x34>
		return;
 8000606:	bf00      	nop
}
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000

08000614 <update_led_buffer>:
void update_led_buffer(int hour, int min)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	led_buffer[0] = hour/10;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a18      	ldr	r2, [pc, #96]	; (8000684 <update_led_buffer+0x70>)
 8000622:	fb82 1203 	smull	r1, r2, r2, r3
 8000626:	1092      	asrs	r2, r2, #2
 8000628:	17db      	asrs	r3, r3, #31
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	4a16      	ldr	r2, [pc, #88]	; (8000688 <update_led_buffer+0x74>)
 800062e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour%10;
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <update_led_buffer+0x70>)
 8000634:	fb83 2301 	smull	r2, r3, r3, r1
 8000638:	109a      	asrs	r2, r3, #2
 800063a:	17cb      	asrs	r3, r1, #31
 800063c:	1ad2      	subs	r2, r2, r3
 800063e:	4613      	mov	r3, r2
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	4413      	add	r3, r2
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	1aca      	subs	r2, r1, r3
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <update_led_buffer+0x74>)
 800064a:	605a      	str	r2, [r3, #4]
	led_buffer[2] = min/10;
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <update_led_buffer+0x70>)
 8000650:	fb82 1203 	smull	r1, r2, r2, r3
 8000654:	1092      	asrs	r2, r2, #2
 8000656:	17db      	asrs	r3, r3, #31
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <update_led_buffer+0x74>)
 800065c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = min%10;
 800065e:	6839      	ldr	r1, [r7, #0]
 8000660:	4b08      	ldr	r3, [pc, #32]	; (8000684 <update_led_buffer+0x70>)
 8000662:	fb83 2301 	smull	r2, r3, r3, r1
 8000666:	109a      	asrs	r2, r3, #2
 8000668:	17cb      	asrs	r3, r1, #31
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	1aca      	subs	r2, r1, r3
 8000676:	4b04      	ldr	r3, [pc, #16]	; (8000688 <update_led_buffer+0x74>)
 8000678:	60da      	str	r2, [r3, #12]
}
<<<<<<< exercise_9
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	66666667 	.word	0x66666667
 8000688:	20000000 	.word	0x20000000

0800068c <main>:
=======
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr
 800066c:	66666667 	.word	0x66666667
 8000670:	20000000 	.word	0x20000000

08000674 <select_pin_0>:
 * Select index of bit 0 in matrix buffer
 * Input: index of matrix buffer
 * Output: ROW_pin which have to RESET
 * */
uint16_t select_pin_0(int index)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint16_t pin_0 = 0x0000;
 800067c:	2300      	movs	r3, #0
 800067e:	81fb      	strh	r3, [r7, #14]

	if (!((uint8_t)(matrix_buffer[index] << 7) >> 7))
 8000680:	4a36      	ldr	r2, [pc, #216]	; (800075c <select_pin_0+0xe8>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	01db      	lsls	r3, r3, #7
 800068a:	b2db      	uxtb	r3, r3
 800068c:	b25b      	sxtb	r3, r3
 800068e:	2b00      	cmp	r3, #0
 8000690:	db03      	blt.n	800069a <select_pin_0+0x26>
		pin_0 |= ROW0_Pin;
 8000692:	89fb      	ldrh	r3, [r7, #14]
 8000694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000698:	81fb      	strh	r3, [r7, #14]
	if (!((uint8_t)(matrix_buffer[index] << 6) >> 7))
 800069a:	4a30      	ldr	r2, [pc, #192]	; (800075c <select_pin_0+0xe8>)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4413      	add	r3, r2
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	019b      	lsls	r3, r3, #6
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	b25b      	sxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db03      	blt.n	80006b4 <select_pin_0+0x40>
		pin_0 |= ROW1_Pin;
 80006ac:	89fb      	ldrh	r3, [r7, #14]
 80006ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b2:	81fb      	strh	r3, [r7, #14]
	if (!((uint8_t)(matrix_buffer[index] << 5) >> 7))
 80006b4:	4a29      	ldr	r2, [pc, #164]	; (800075c <select_pin_0+0xe8>)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	015b      	lsls	r3, r3, #5
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	db03      	blt.n	80006ce <select_pin_0+0x5a>
		pin_0 |= ROW2_Pin;
 80006c6:	89fb      	ldrh	r3, [r7, #14]
 80006c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006cc:	81fb      	strh	r3, [r7, #14]
	if (!((uint8_t)(matrix_buffer[index] << 4) >> 7))
 80006ce:	4a23      	ldr	r2, [pc, #140]	; (800075c <select_pin_0+0xe8>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4413      	add	r3, r2
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db03      	blt.n	80006e8 <select_pin_0+0x74>
		pin_0 |= ROW3_Pin;
 80006e0:	89fb      	ldrh	r3, [r7, #14]
 80006e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006e6:	81fb      	strh	r3, [r7, #14]
	if (!((uint8_t)(matrix_buffer[index] << 3) >> 7))
 80006e8:	4a1c      	ldr	r2, [pc, #112]	; (800075c <select_pin_0+0xe8>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	b25b      	sxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	db03      	blt.n	8000702 <select_pin_0+0x8e>
		pin_0 |= ROW4_Pin;
 80006fa:	89fb      	ldrh	r3, [r7, #14]
 80006fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000700:	81fb      	strh	r3, [r7, #14]
	if (!((uint8_t)(matrix_buffer[index] << 2) >> 7))
 8000702:	4a16      	ldr	r2, [pc, #88]	; (800075c <select_pin_0+0xe8>)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4413      	add	r3, r2
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	b2db      	uxtb	r3, r3
 800070e:	b25b      	sxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	db03      	blt.n	800071c <select_pin_0+0xa8>
		pin_0 |= ROW5_Pin;
 8000714:	89fb      	ldrh	r3, [r7, #14]
 8000716:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800071a:	81fb      	strh	r3, [r7, #14]
	if (!((uint8_t)(matrix_buffer[index] << 1) >> 7))
 800071c:	4a0f      	ldr	r2, [pc, #60]	; (800075c <select_pin_0+0xe8>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	b25b      	sxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	db03      	blt.n	8000736 <select_pin_0+0xc2>
		pin_0 |= ROW6_Pin;
 800072e:	89fb      	ldrh	r3, [r7, #14]
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	81fb      	strh	r3, [r7, #14]
	if (!((uint8_t)(matrix_buffer[index] << 0) >> 7))
 8000736:	4a09      	ldr	r2, [pc, #36]	; (800075c <select_pin_0+0xe8>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4413      	add	r3, r2
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	b25b      	sxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	db05      	blt.n	8000750 <select_pin_0+0xdc>
		pin_0 |= ROW7_Pin;
 8000744:	89fb      	ldrh	r3, [r7, #14]
 8000746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800074a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800074e:	81fb      	strh	r3, [r7, #14]
	return pin_0;
 8000750:	89fb      	ldrh	r3, [r7, #14]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3714      	adds	r7, #20
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	20000010 	.word	0x20000010

08000760 <updateLEDMatrix>:
/*
 * Update column-index from matrix-buffer
 * Input: index of column
 * Output: turn on led base on buffer
 * */
void updateLEDMatrix(int index){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b07      	cmp	r3, #7
 800076c:	f200 80a2 	bhi.w	80008b4 <updateLEDMatrix+0x154>
 8000770:	a201      	add	r2, pc, #4	; (adr r2, 8000778 <updateLEDMatrix+0x18>)
 8000772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000776:	bf00      	nop
 8000778:	08000799 	.word	0x08000799
 800077c:	080007bb 	.word	0x080007bb
 8000780:	080007dd 	.word	0x080007dd
 8000784:	08000801 	.word	0x08000801
 8000788:	08000825 	.word	0x08000825
 800078c:	08000849 	.word	0x08000849
 8000790:	0800086d 	.word	0x0800086d
 8000794:	08000891 	.word	0x08000891
	uint16_t  pin_0;

    switch (index){
        case 0:
        	HAL_GPIO_WritePin(COL0_GPIO_Port, COL0_Pin, RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2104      	movs	r1, #4
 800079c:	484e      	ldr	r0, [pc, #312]	; (80008d8 <updateLEDMatrix+0x178>)
 800079e:	f000 fe75 	bl	800148c <HAL_GPIO_WritePin>
        	pin_0 = select_pin_0(0);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff ff66 	bl	8000674 <select_pin_0>
 80007a8:	4603      	mov	r3, r0
 80007aa:	81fb      	strh	r3, [r7, #14]
        	HAL_GPIO_WritePin(GPIOB, pin_0, RESET);
 80007ac:	89fb      	ldrh	r3, [r7, #14]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	484a      	ldr	r0, [pc, #296]	; (80008dc <updateLEDMatrix+0x17c>)
 80007b4:	f000 fe6a 	bl	800148c <HAL_GPIO_WritePin>
            break;
 80007b8:	e089      	b.n	80008ce <updateLEDMatrix+0x16e>
        case 1:
        	HAL_GPIO_WritePin(COL0_GPIO_Port, COL1_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2108      	movs	r1, #8
 80007be:	4846      	ldr	r0, [pc, #280]	; (80008d8 <updateLEDMatrix+0x178>)
 80007c0:	f000 fe64 	bl	800148c <HAL_GPIO_WritePin>
        	pin_0 = select_pin_0(1);
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff ff55 	bl	8000674 <select_pin_0>
 80007ca:	4603      	mov	r3, r0
 80007cc:	81fb      	strh	r3, [r7, #14]
        	HAL_GPIO_WritePin(GPIOB, pin_0, RESET);
 80007ce:	89fb      	ldrh	r3, [r7, #14]
 80007d0:	2200      	movs	r2, #0
 80007d2:	4619      	mov	r1, r3
 80007d4:	4841      	ldr	r0, [pc, #260]	; (80008dc <updateLEDMatrix+0x17c>)
 80007d6:	f000 fe59 	bl	800148c <HAL_GPIO_WritePin>
            break;
 80007da:	e078      	b.n	80008ce <updateLEDMatrix+0x16e>
        case 2:
        	HAL_GPIO_WritePin(COL0_GPIO_Port, COL2_Pin, RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e2:	483d      	ldr	r0, [pc, #244]	; (80008d8 <updateLEDMatrix+0x178>)
 80007e4:	f000 fe52 	bl	800148c <HAL_GPIO_WritePin>
        	pin_0 = select_pin_0(2);
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ff43 	bl	8000674 <select_pin_0>
 80007ee:	4603      	mov	r3, r0
 80007f0:	81fb      	strh	r3, [r7, #14]
        	HAL_GPIO_WritePin(GPIOB, pin_0, RESET);
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	4838      	ldr	r0, [pc, #224]	; (80008dc <updateLEDMatrix+0x17c>)
 80007fa:	f000 fe47 	bl	800148c <HAL_GPIO_WritePin>
            break;
 80007fe:	e066      	b.n	80008ce <updateLEDMatrix+0x16e>
        case 3:
        	HAL_GPIO_WritePin(COL0_GPIO_Port, COL3_Pin, RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000806:	4834      	ldr	r0, [pc, #208]	; (80008d8 <updateLEDMatrix+0x178>)
 8000808:	f000 fe40 	bl	800148c <HAL_GPIO_WritePin>
        	pin_0 = select_pin_0(3);
 800080c:	2003      	movs	r0, #3
 800080e:	f7ff ff31 	bl	8000674 <select_pin_0>
 8000812:	4603      	mov	r3, r0
 8000814:	81fb      	strh	r3, [r7, #14]
        	HAL_GPIO_WritePin(GPIOB, pin_0, RESET);
 8000816:	89fb      	ldrh	r3, [r7, #14]
 8000818:	2200      	movs	r2, #0
 800081a:	4619      	mov	r1, r3
 800081c:	482f      	ldr	r0, [pc, #188]	; (80008dc <updateLEDMatrix+0x17c>)
 800081e:	f000 fe35 	bl	800148c <HAL_GPIO_WritePin>
            break;
 8000822:	e054      	b.n	80008ce <updateLEDMatrix+0x16e>
        case 4:
        	HAL_GPIO_WritePin(COL0_GPIO_Port, COL4_Pin, RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800082a:	482b      	ldr	r0, [pc, #172]	; (80008d8 <updateLEDMatrix+0x178>)
 800082c:	f000 fe2e 	bl	800148c <HAL_GPIO_WritePin>
        	pin_0 = select_pin_0(4);
 8000830:	2004      	movs	r0, #4
 8000832:	f7ff ff1f 	bl	8000674 <select_pin_0>
 8000836:	4603      	mov	r3, r0
 8000838:	81fb      	strh	r3, [r7, #14]
        	HAL_GPIO_WritePin(GPIOB, pin_0, RESET);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	2200      	movs	r2, #0
 800083e:	4619      	mov	r1, r3
 8000840:	4826      	ldr	r0, [pc, #152]	; (80008dc <updateLEDMatrix+0x17c>)
 8000842:	f000 fe23 	bl	800148c <HAL_GPIO_WritePin>
            break;
 8000846:	e042      	b.n	80008ce <updateLEDMatrix+0x16e>
        case 5:
        	HAL_GPIO_WritePin(COL0_GPIO_Port, COL5_Pin, RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800084e:	4822      	ldr	r0, [pc, #136]	; (80008d8 <updateLEDMatrix+0x178>)
 8000850:	f000 fe1c 	bl	800148c <HAL_GPIO_WritePin>
        	pin_0 = select_pin_0(5);
 8000854:	2005      	movs	r0, #5
 8000856:	f7ff ff0d 	bl	8000674 <select_pin_0>
 800085a:	4603      	mov	r3, r0
 800085c:	81fb      	strh	r3, [r7, #14]
        	HAL_GPIO_WritePin(GPIOB, pin_0, RESET);
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	481d      	ldr	r0, [pc, #116]	; (80008dc <updateLEDMatrix+0x17c>)
 8000866:	f000 fe11 	bl	800148c <HAL_GPIO_WritePin>
            break;
 800086a:	e030      	b.n	80008ce <updateLEDMatrix+0x16e>
        case 6:
        	HAL_GPIO_WritePin(COL0_GPIO_Port, COL6_Pin, RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000872:	4819      	ldr	r0, [pc, #100]	; (80008d8 <updateLEDMatrix+0x178>)
 8000874:	f000 fe0a 	bl	800148c <HAL_GPIO_WritePin>
        	pin_0 = select_pin_0(6);
 8000878:	2006      	movs	r0, #6
 800087a:	f7ff fefb 	bl	8000674 <select_pin_0>
 800087e:	4603      	mov	r3, r0
 8000880:	81fb      	strh	r3, [r7, #14]
        	HAL_GPIO_WritePin(GPIOB, pin_0, RESET);
 8000882:	89fb      	ldrh	r3, [r7, #14]
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	4814      	ldr	r0, [pc, #80]	; (80008dc <updateLEDMatrix+0x17c>)
 800088a:	f000 fdff 	bl	800148c <HAL_GPIO_WritePin>
            break;
 800088e:	e01e      	b.n	80008ce <updateLEDMatrix+0x16e>
        case 7:
        	HAL_GPIO_WritePin(COL0_GPIO_Port, COL7_Pin, RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000896:	4810      	ldr	r0, [pc, #64]	; (80008d8 <updateLEDMatrix+0x178>)
 8000898:	f000 fdf8 	bl	800148c <HAL_GPIO_WritePin>
        	pin_0 = select_pin_0(7);
 800089c:	2007      	movs	r0, #7
 800089e:	f7ff fee9 	bl	8000674 <select_pin_0>
 80008a2:	4603      	mov	r3, r0
 80008a4:	81fb      	strh	r3, [r7, #14]
        	HAL_GPIO_WritePin(GPIOB, pin_0, RESET);
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	2200      	movs	r2, #0
 80008aa:	4619      	mov	r1, r3
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <updateLEDMatrix+0x17c>)
 80008ae:	f000 fded 	bl	800148c <HAL_GPIO_WritePin>
            break;
 80008b2:	e00c      	b.n	80008ce <updateLEDMatrix+0x16e>
        default:
        	HAL_GPIO_WritePin(GPIOA, COL0_Pin|COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin|COL5_Pin|COL6_Pin|COL7_Pin, SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	f64f 410c 	movw	r1, #64524	; 0xfc0c
 80008ba:	4807      	ldr	r0, [pc, #28]	; (80008d8 <updateLEDMatrix+0x178>)
 80008bc:	f000 fde6 	bl	800148c <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOB, ROW0_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin|ROW7_Pin, SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <updateLEDMatrix+0x17c>)
 80008c8:	f000 fde0 	bl	800148c <HAL_GPIO_WritePin>
            break;
 80008cc:	bf00      	nop
    }
}
 80008ce:	bf00      	nop
 80008d0:	3710      	adds	r7, #16
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40010800 	.word	0x40010800
 80008dc:	40010c00 	.word	0x40010c00

080008e0 <get_index>:
 * Get index of led matrix
 * Input: none
 * Ouput: current index of led matrix
 * */
int get_index()
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	return index_led_matrix;
 80008e4:	4b02      	ldr	r3, [pc, #8]	; (80008f0 <get_index+0x10>)
 80008e6:	681b      	ldr	r3, [r3, #0]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	2000004c 	.word	0x2000004c

080008f4 <inc_index>:
 * Increase index of led matrix
 * Input: none
 * Output: none
 * */
void inc_index()
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
	index_led_matrix++;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <inc_index+0x24>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3301      	adds	r3, #1
 80008fe:	4a06      	ldr	r2, [pc, #24]	; (8000918 <inc_index+0x24>)
 8000900:	6013      	str	r3, [r2, #0]
	if (index_led_matrix > 7)
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <inc_index+0x24>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b07      	cmp	r3, #7
 8000908:	dd02      	ble.n	8000910 <inc_index+0x1c>
		index_led_matrix = 0;
 800090a:	4b03      	ldr	r3, [pc, #12]	; (8000918 <inc_index+0x24>)
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	2000004c 	.word	0x2000004c

0800091c <set_buffer>:
 * Set matrix buffer
 * Input: Character you want to display on led matrix
 * Output: none
 * */
void set_buffer(char input)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	switch (input)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b41      	cmp	r3, #65	; 0x41
 800092a:	d118      	bne.n	800095e <set_buffer+0x42>
	{
	case 'A':
		matrix_buffer[0] = 0xFF;
 800092c:	4b0f      	ldr	r3, [pc, #60]	; (800096c <set_buffer+0x50>)
 800092e:	22ff      	movs	r2, #255	; 0xff
 8000930:	701a      	strb	r2, [r3, #0]
		matrix_buffer[1] = 0x03;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <set_buffer+0x50>)
 8000934:	2203      	movs	r2, #3
 8000936:	705a      	strb	r2, [r3, #1]
		matrix_buffer[2] = 0x01;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <set_buffer+0x50>)
 800093a:	2201      	movs	r2, #1
 800093c:	709a      	strb	r2, [r3, #2]
		matrix_buffer[3] = 0xCC;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <set_buffer+0x50>)
 8000940:	22cc      	movs	r2, #204	; 0xcc
 8000942:	70da      	strb	r2, [r3, #3]
		matrix_buffer[4] = 0xCC;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <set_buffer+0x50>)
 8000946:	22cc      	movs	r2, #204	; 0xcc
 8000948:	711a      	strb	r2, [r3, #4]
		matrix_buffer[5] = 0x01;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <set_buffer+0x50>)
 800094c:	2201      	movs	r2, #1
 800094e:	715a      	strb	r2, [r3, #5]
		matrix_buffer[6] = 0x03;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <set_buffer+0x50>)
 8000952:	2203      	movs	r2, #3
 8000954:	719a      	strb	r2, [r3, #6]
		matrix_buffer[7] = 0xFF;
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <set_buffer+0x50>)
 8000958:	22ff      	movs	r2, #255	; 0xff
 800095a:	71da      	strb	r2, [r3, #7]
		break;
 800095c:	e000      	b.n	8000960 <set_buffer+0x44>
	default:
		break;
 800095e:	bf00      	nop
	}
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	bc80      	pop	{r7}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000010 	.word	0x20000010

08000970 <main>:
>>>>>>> local
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< exercise_9
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
=======
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
>>>>>>> local
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< exercise_9
 8000692:	f000 fa89 	bl	8000ba8 <HAL_Init>
=======
 8000976:	f000 fa9f 	bl	8000eb8 <HAL_Init>
>>>>>>> local
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< exercise_9
 8000696:	f000 f891 	bl	80007bc <SystemClock_Config>
=======
 800097a:	f000 f895 	bl	8000aa8 <SystemClock_Config>
>>>>>>> local
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< exercise_9
 800069a:	f000 f917 	bl	80008cc <MX_GPIO_Init>
  MX_TIM2_Init();
 800069e:	f000 f8c9 	bl	8000834 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006a2:	4844      	ldr	r0, [pc, #272]	; (80007b4 <main+0x128>)
 80006a4:	f001 f9c8 	bl	8001a38 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
=======
 800097e:	f000 f91b 	bl	8000bb8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000982:	f000 f8cd 	bl	8000b20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000986:	4846      	ldr	r0, [pc, #280]	; (8000aa0 <main+0x130>)
 8000988:	f001 f9de 	bl	8001d48 <HAL_TIM_Base_Start_IT>
>>>>>>> local

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
<<<<<<< exercise_9
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	4842      	ldr	r0, [pc, #264]	; (80007b8 <main+0x12c>)
 80006ae:	f000 fd65 	bl	800117c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DOT_GPIO_Port, DOT_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2110      	movs	r1, #16
 80006b6:	4840      	ldr	r0, [pc, #256]	; (80007b8 <main+0x12c>)
 80006b8:	f000 fd60 	bl	800117c <HAL_GPIO_WritePin>
  display7SEG(-1);
 80006bc:	f04f 30ff 	mov.w	r0, #4294967295
 80006c0:	f7ff fd8c 	bl	80001dc <display7SEG>
  set_led7seg(-1);
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f7ff ff3a 	bl	8000540 <set_led7seg>

  set_timer(25, 0);		//timer for 7 segment led
 80006cc:	2100      	movs	r1, #0
 80006ce:	2019      	movs	r0, #25
 80006d0:	f000 f9f4 	bl	8000abc <set_timer>
  set_timer(100, 1);	//timer for DOT
 80006d4:	2101      	movs	r1, #1
 80006d6:	2064      	movs	r0, #100	; 0x64
 80006d8:	f000 f9f0 	bl	8000abc <set_timer>
  set_timer(100, 2);		//timer for clock
 80006dc:	2102      	movs	r1, #2
 80006de:	2064      	movs	r0, #100	; 0x64
 80006e0:	f000 f9ec 	bl	8000abc <set_timer>
  int led = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  set_clock(15, 8, 50);
 80006e8:	2232      	movs	r2, #50	; 0x32
 80006ea:	2108      	movs	r1, #8
 80006ec:	200f      	movs	r0, #15
 80006ee:	f7ff fd3d 	bl	800016c <set_clock>
  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	4830      	ldr	r0, [pc, #192]	; (80007b8 <main+0x12c>)
 80006f8:	f000 fd40 	bl	800117c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	482d      	ldr	r0, [pc, #180]	; (80007b8 <main+0x12c>)
 8000702:	f000 fd3b 	bl	800117c <HAL_GPIO_WritePin>
	  {
		  set_timer(100, 0);
		  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
=======
 800098c:	2200      	movs	r2, #0
 800098e:	2120      	movs	r1, #32
 8000990:	4844      	ldr	r0, [pc, #272]	; (8000aa4 <main+0x134>)
 8000992:	f000 fd7b 	bl	800148c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DOT_GPIO_Port, DOT_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	2110      	movs	r1, #16
 800099a:	4842      	ldr	r0, [pc, #264]	; (8000aa4 <main+0x134>)
 800099c:	f000 fd76 	bl	800148c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	483f      	ldr	r0, [pc, #252]	; (8000aa4 <main+0x134>)
 80009a6:	f000 fd71 	bl	800148c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	483d      	ldr	r0, [pc, #244]	; (8000aa4 <main+0x134>)
 80009b0:	f000 fd6c 	bl	800148c <HAL_GPIO_WritePin>
  display7SEG(-1);
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f7ff fc04 	bl	80001c4 <display7SEG>
  set_led7seg(-1);
 80009bc:	f04f 30ff 	mov.w	r0, #4294967295
 80009c0:	f7ff fdb2 	bl	8000528 <set_led7seg>
  set_buffer('A');
 80009c4:	2041      	movs	r0, #65	; 0x41
 80009c6:	f7ff ffa9 	bl	800091c <set_buffer>

  /* Set timer for each object */
  set_timer(2, 0);		//timer for 7 segment led
 80009ca:	2100      	movs	r1, #0
 80009cc:	2002      	movs	r0, #2
 80009ce:	f000 f9fd 	bl	8000dcc <set_timer>
  set_timer(2, 1);		//timer for DOT
 80009d2:	2101      	movs	r1, #1
 80009d4:	2002      	movs	r0, #2
 80009d6:	f000 f9f9 	bl	8000dcc <set_timer>
  set_timer(2, 2);		//timer for clock
 80009da:	2102      	movs	r1, #2
 80009dc:	2002      	movs	r0, #2
 80009de:	f000 f9f5 	bl	8000dcc <set_timer>
  set_timer(2, 3);		//timer for led matrix
 80009e2:	2103      	movs	r1, #3
 80009e4:	2002      	movs	r0, #2
 80009e6:	f000 f9f1 	bl	8000dcc <set_timer>

  /* Declare needed local variable */
  int led = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
  updateClockBuffrer(15, 8, 50);
 80009ee:	2232      	movs	r2, #50	; 0x32
 80009f0:	2108      	movs	r1, #8
 80009f2:	200f      	movs	r0, #15
 80009f4:	f7ff fbaa 	bl	800014c <updateClockBuffrer>

  while (1)
  {
	  if (get_flag(0))
 80009f8:	2000      	movs	r0, #0
 80009fa:	f000 fa27 	bl	8000e4c <get_flag>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00e      	beq.n	8000a22 <main+0xb2>
	  {
		  if(led >= MAX_LED)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	dd01      	ble.n	8000a0e <main+0x9e>
			  led = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
		  update7SEG(led);
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f7ff fdd4 	bl	80005bc <update7SEG>
		  led++;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	3301      	adds	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
		  set_timer(25, 0);		//reset timer 0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2019      	movs	r0, #25
 8000a1e:	f000 f9d5 	bl	8000dcc <set_timer>
>>>>>>> local
	  }
#endif
	  if (get_flag(1))
<<<<<<< exercise_9
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fa18 	bl	8000b3c <get_flag>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <main+0x96>
	  {
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8000712:	2110      	movs	r1, #16
 8000714:	4828      	ldr	r0, [pc, #160]	; (80007b8 <main+0x12c>)
 8000716:	f000 fd49 	bl	80011ac <HAL_GPIO_TogglePin>
		  set_timer(100, 1);
 800071a:	2101      	movs	r1, #1
 800071c:	2064      	movs	r0, #100	; 0x64
 800071e:	f000 f9cd 	bl	8000abc <set_timer>
=======
 8000a22:	2001      	movs	r0, #1
 8000a24:	f000 fa12 	bl	8000e4c <get_flag>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <main+0xce>
	  {
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8000a2e:	2110      	movs	r1, #16
 8000a30:	481c      	ldr	r0, [pc, #112]	; (8000aa4 <main+0x134>)
 8000a32:	f000 fd43 	bl	80014bc <HAL_GPIO_TogglePin>
		  set_timer(100, 1);	//reset timer 1
 8000a36:	2101      	movs	r1, #1
 8000a38:	2064      	movs	r0, #100	; 0x64
 8000a3a:	f000 f9c7 	bl	8000dcc <set_timer>
>>>>>>> local
	  }
	  if (get_flag(0))
 8000722:	2000      	movs	r0, #0
 8000724:	f000 fa0a 	bl	8000b3c <get_flag>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d00e      	beq.n	800074c <main+0xc0>
			  break;
		  }
#endif

#ifdef EX_4
		  if(led >= MAX_LED)
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b03      	cmp	r3, #3
 8000732:	dd01      	ble.n	8000738 <main+0xac>
			  led = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
		  update7SEG(led);
 8000738:	68f8      	ldr	r0, [r7, #12]
 800073a:	f7ff ff4b 	bl	80005d4 <update7SEG>
		  led++;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
		  set_timer(25, 0);
 8000744:	2100      	movs	r1, #0
 8000746:	2019      	movs	r0, #25
 8000748:	f000 f9b8 	bl	8000abc <set_timer>
#endif
	  }
#if 1
	  if (get_flag(2))
<<<<<<< exercise_9
 800074c:	2002      	movs	r0, #2
 800074e:	f000 f9f5 	bl	8000b3c <get_flag>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d0d6      	beq.n	8000706 <main+0x7a>
	  {
		  int sec = get_sec(), min = get_min(), hour = get_hour();
 8000758:	f7ff fd36 	bl	80001c8 <get_sec>
 800075c:	60b8      	str	r0, [r7, #8]
 800075e:	f7ff fd29 	bl	80001b4 <get_min>
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	f7ff fd1c 	bl	80001a0 <get_hour>
 8000768:	6038      	str	r0, [r7, #0]
		  sec++;
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	3301      	adds	r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
		  if (sec >= 60)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	2b3b      	cmp	r3, #59	; 0x3b
 8000774:	dd04      	ble.n	8000780 <main+0xf4>
		  {
			  sec = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
			  min++;
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
		  }
		  if (min >= 60)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b3b      	cmp	r3, #59	; 0x3b
 8000784:	dd04      	ble.n	8000790 <main+0x104>
		  {
			  min = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
			  hour++;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	603b      	str	r3, [r7, #0]
		  }
		  if (hour >= 24)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	2b17      	cmp	r3, #23
 8000794:	dd01      	ble.n	800079a <main+0x10e>
		  {
			  hour = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	603b      	str	r3, [r7, #0]
		  }
		  set_clock(hour, min, sec);
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	6838      	ldr	r0, [r7, #0]
 80007a0:	f7ff fce4 	bl	800016c <set_clock>
		  updateClockBuffrer();
 80007a4:	f7ff fcd2 	bl	800014c <updateClockBuffrer>
		  set_timer(100, 2);
 80007a8:	2102      	movs	r1, #2
 80007aa:	2064      	movs	r0, #100	; 0x64
 80007ac:	f000 f986 	bl	8000abc <set_timer>
	  if (get_flag(1))
 80007b0:	e7a9      	b.n	8000706 <main+0x7a>
 80007b2:	bf00      	nop
 80007b4:	2000006c 	.word	0x2000006c
 80007b8:	40010800 	.word	0x40010800

080007bc <SystemClock_Config>:
=======
 8000a3e:	2002      	movs	r0, #2
 8000a40:	f000 fa04 	bl	8000e4c <get_flag>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0d6      	beq.n	80009f8 <main+0x88>
	  {
		  int sec = get_sec(), min = get_min(), hour = get_hour();
 8000a4a:	f7ff fbb1 	bl	80001b0 <get_sec>
 8000a4e:	60b8      	str	r0, [r7, #8]
 8000a50:	f7ff fba4 	bl	800019c <get_min>
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	f7ff fb97 	bl	8000188 <get_hour>
 8000a5a:	6038      	str	r0, [r7, #0]

		  sec++;
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60bb      	str	r3, [r7, #8]
		  if (sec >= 60)
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	2b3b      	cmp	r3, #59	; 0x3b
 8000a66:	dd04      	ble.n	8000a72 <main+0x102>
		  {
			  sec = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
			  min++;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
		  }
		  if (min >= 60)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b3b      	cmp	r3, #59	; 0x3b
 8000a76:	dd04      	ble.n	8000a82 <main+0x112>
		  {
			  min = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
			  hour++;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	603b      	str	r3, [r7, #0]
		  }
		  if (hour >= 24)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b17      	cmp	r3, #23
 8000a86:	dd01      	ble.n	8000a8c <main+0x11c>
		  {
			  hour = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	603b      	str	r3, [r7, #0]
		  }
		  updateClockBuffrer(hour, min, sec);
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	6879      	ldr	r1, [r7, #4]
 8000a90:	6838      	ldr	r0, [r7, #0]
 8000a92:	f7ff fb5b 	bl	800014c <updateClockBuffrer>
		  set_timer(100, 2);	//reset timer 2
 8000a96:	2102      	movs	r1, #2
 8000a98:	2064      	movs	r0, #100	; 0x64
 8000a9a:	f000 f997 	bl	8000dcc <set_timer>
	  if (get_flag(0))
 8000a9e:	e7ab      	b.n	80009f8 <main+0x88>
 8000aa0:	20000078 	.word	0x20000078
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <SystemClock_Config>:
>>>>>>> local
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< exercise_9
 80007bc:	b580      	push	{r7, lr}
 80007be:	b090      	sub	sp, #64	; 0x40
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0318 	add.w	r3, r7, #24
 80007c6:	2228      	movs	r2, #40	; 0x28
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fcf0 	bl	80021b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
=======
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b090      	sub	sp, #64	; 0x40
 8000aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aae:	f107 0318 	add.w	r3, r7, #24
 8000ab2:	2228      	movs	r2, #40	; 0x28
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fd02 	bl	80024c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]
>>>>>>> local

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< exercise_9
 80007de:	2302      	movs	r3, #2
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e2:	2301      	movs	r3, #1
 80007e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e6:	2310      	movs	r3, #16
 80007e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	4618      	mov	r0, r3
 80007f4:	f000 fcf4 	bl	80011e0 <HAL_RCC_OscConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007fe:	f000 f8ca 	bl	8000996 <Error_Handler>
=======
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ada:	f107 0318 	add.w	r3, r7, #24
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fd06 	bl	80014f0 <HAL_RCC_OscConfig>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000aea:	f000 f8db 	bl	8000ca4 <Error_Handler>
>>>>>>> local
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< exercise_9
 8000802:	230f      	movs	r3, #15
 8000804:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f000 ff60 	bl	80016e0 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000826:	f000 f8b6 	bl	8000996 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3740      	adds	r7, #64	; 0x40
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MX_TIM2_Init>:
=======
 8000aee:	230f      	movs	r3, #15
 8000af0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 ff72 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b12:	f000 f8c7 	bl	8000ca4 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3740      	adds	r7, #64	; 0x40
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <MX_TIM2_Init>:
>>>>>>> local
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< exercise_9
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af00      	add	r7, sp, #0
=======
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
>>>>>>> local

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< exercise_9
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000848:	463b      	mov	r3, r7
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
=======
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
>>>>>>> local

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< exercise_9
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_TIM2_Init+0x94>)
 8000852:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000856:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_TIM2_Init+0x94>)
 800085a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800085e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000860:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <MX_TIM2_Init+0x94>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_TIM2_Init+0x94>)
 8000868:	2209      	movs	r2, #9
 800086a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_TIM2_Init+0x94>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <MX_TIM2_Init+0x94>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000878:	4813      	ldr	r0, [pc, #76]	; (80008c8 <MX_TIM2_Init+0x94>)
 800087a:	f001 f88d 	bl	8001998 <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000884:	f000 f887 	bl	8000996 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_TIM2_Init+0x94>)
 8000896:	f001 fa23 	bl	8001ce0 <HAL_TIM_ConfigClockSource>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008a0:	f000 f879 	bl	8000996 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_TIM2_Init+0x94>)
 80008b2:	f001 fbef 	bl	8002094 <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008bc:	f000 f86b 	bl	8000996 <Error_Handler>
=======
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b46:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b54:	2209      	movs	r2, #9
 8000b56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5e:	4b15      	ldr	r3, [pc, #84]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b64:	4813      	ldr	r0, [pc, #76]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b66:	f001 f89f 	bl	8001ca8 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b70:	f000 f898 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b7a:	f107 0308 	add.w	r3, r7, #8
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b82:	f001 fa35 	bl	8001ff0 <HAL_TIM_ConfigClockSource>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b8c:	f000 f88a 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b90:	2300      	movs	r3, #0
 8000b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b98:	463b      	mov	r3, r7
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_TIM2_Init+0x94>)
 8000b9e:	f001 fc01 	bl	80023a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ba8:	f000 f87c 	bl	8000ca4 <Error_Handler>
>>>>>>> local
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
<<<<<<< exercise_9
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000006c 	.word	0x2000006c

080008cc <MX_GPIO_Init>:
=======
 8000bac:	bf00      	nop
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000078 	.word	0x20000078

08000bb8 <MX_GPIO_Init>:
>>>>>>> local
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< exercise_9
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d2:	f107 0308 	add.w	r3, r7, #8
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <MX_GPIO_Init+0x9c>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a20      	ldr	r2, [pc, #128]	; (8000968 <MX_GPIO_Init+0x9c>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_GPIO_Init+0x9c>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0304 	and.w	r3, r3, #4
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <MX_GPIO_Init+0x9c>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <MX_GPIO_Init+0x9c>)
 80008fe:	f043 0308 	orr.w	r3, r3, #8
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <MX_GPIO_Init+0x9c>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0308 	and.w	r3, r3, #8
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DOT_Pin|LED_RED_Pin|EN0_Pin|EN1_Pin
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 717c 	mov.w	r1, #1008	; 0x3f0
 8000916:	4815      	ldr	r0, [pc, #84]	; (800096c <MX_GPIO_Init+0xa0>)
 8000918:	f000 fc30 	bl	800117c <HAL_GPIO_WritePin>
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D_Pin
 800091c:	2200      	movs	r2, #0
 800091e:	217f      	movs	r1, #127	; 0x7f
 8000920:	4813      	ldr	r0, [pc, #76]	; (8000970 <MX_GPIO_Init+0xa4>)
 8000922:	f000 fc2b 	bl	800117c <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DOT_Pin LED_RED_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = DOT_Pin|LED_RED_Pin|EN0_Pin|EN1_Pin
 8000926:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
 800092a:	60bb      	str	r3, [r7, #8]
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2302      	movs	r3, #2
 8000936:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4619      	mov	r1, r3
 800093e:	480b      	ldr	r0, [pc, #44]	; (800096c <MX_GPIO_Init+0xa0>)
 8000940:	f000 faa2 	bl	8000e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 8000944:	237f      	movs	r3, #127	; 0x7f
 8000946:	60bb      	str	r3, [r7, #8]
                          |E_Pin|F_Pin|G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 0308 	add.w	r3, r7, #8
 8000958:	4619      	mov	r1, r3
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_GPIO_Init+0xa4>)
 800095c:	f000 fa94 	bl	8000e88 <HAL_GPIO_Init>

}
 8000960:	bf00      	nop
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000
 800096c:	40010800 	.word	0x40010800
 8000970:	40010c00 	.word	0x40010c00

08000974 <HAL_TIM_PeriodElapsedCallback>:
=======
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bcc:	4b22      	ldr	r3, [pc, #136]	; (8000c58 <MX_GPIO_Init+0xa0>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	4a21      	ldr	r2, [pc, #132]	; (8000c58 <MX_GPIO_Init+0xa0>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	6193      	str	r3, [r2, #24]
 8000bd8:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <MX_GPIO_Init+0xa0>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	f003 0304 	and.w	r3, r3, #4
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <MX_GPIO_Init+0xa0>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <MX_GPIO_Init+0xa0>)
 8000bea:	f043 0308 	orr.w	r3, r3, #8
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <MX_GPIO_Init+0xa0>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0308 	and.w	r3, r3, #8
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, COL0_Pin|COL1_Pin|DOT_Pin|LED_RED_Pin
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8000c02:	4816      	ldr	r0, [pc, #88]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000c04:	f000 fc42 	bl	800148c <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |COL2_Pin|COL3_Pin|COL4_Pin|COL5_Pin
                          |COL6_Pin|COL7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|ROW2_Pin
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000c0e:	4814      	ldr	r0, [pc, #80]	; (8000c60 <MX_GPIO_Init+0xa8>)
 8000c10:	f000 fc3c 	bl	800148c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL0_Pin COL1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           COL2_Pin COL3_Pin COL4_Pin COL5_Pin
                           COL6_Pin COL7_Pin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|DOT_Pin|LED_RED_Pin
 8000c14:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000c18:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |COL2_Pin|COL3_Pin|COL4_Pin|COL5_Pin
                          |COL6_Pin|COL7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2302      	movs	r3, #2
 8000c24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0308 	add.w	r3, r7, #8
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480b      	ldr	r0, [pc, #44]	; (8000c5c <MX_GPIO_Init+0xa4>)
 8000c2e:	f000 fab3 	bl	8001198 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin D_Pin E_Pin F_Pin
                           G_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|ROW2_Pin
 8000c32:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000c36:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2302      	movs	r3, #2
 8000c42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 0308 	add.w	r3, r7, #8
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <MX_GPIO_Init+0xa8>)
 8000c4c:	f000 faa4 	bl	8001198 <HAL_GPIO_Init>

}
 8000c50:	bf00      	nop
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	40010800 	.word	0x40010800
 8000c60:	40010c00 	.word	0x40010c00

08000c64 <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> local

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< exercise_9
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
	run_timer(0);
 800097c:	2000      	movs	r0, #0
 800097e:	f000 f8b5 	bl	8000aec <run_timer>
	run_timer(1);
 8000982:	2001      	movs	r0, #1
 8000984:	f000 f8b2 	bl	8000aec <run_timer>
	run_timer(2);
 8000988:	2002      	movs	r0, #2
 800098a:	f000 f8af 	bl	8000aec <run_timer>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <Error_Handler>:
=======
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	run_timer(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f000 f8c5 	bl	8000dfc <run_timer>
	run_timer(1);
 8000c72:	2001      	movs	r0, #1
 8000c74:	f000 f8c2 	bl	8000dfc <run_timer>
	run_timer(2);
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f000 f8bf 	bl	8000dfc <run_timer>
	run_timer(3);
 8000c7e:	2003      	movs	r0, #3
 8000c80:	f000 f8bc 	bl	8000dfc <run_timer>
	  updateLEDMatrix(-1);
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f7ff fd6a 	bl	8000760 <updateLEDMatrix>
	  updateLEDMatrix(get_index());
 8000c8c:	f7ff fe28 	bl	80008e0 <get_index>
 8000c90:	4603      	mov	r3, r0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fd64 	bl	8000760 <updateLEDMatrix>
	  inc_index();
 8000c98:	f7ff fe2c 	bl	80008f4 <inc_index>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <Error_Handler>:
>>>>>>> local
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< exercise_9
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
=======
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
>>>>>>> local
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< exercise_9
 800099a:	b672      	cpsid	i
}
 800099c:	bf00      	nop
=======
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
>>>>>>> local
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< exercise_9
 800099e:	e7fe      	b.n	800099e <Error_Handler+0x8>

080009a0 <HAL_MspInit>:
=======
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
>>>>>>> local
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< exercise_9
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
=======
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
>>>>>>> local
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< exercise_9
 80009a6:	4b15      	ldr	r3, [pc, #84]	; (80009fc <HAL_MspInit+0x5c>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	4a14      	ldr	r2, [pc, #80]	; (80009fc <HAL_MspInit+0x5c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6193      	str	r3, [r2, #24]
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_MspInit+0x5c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x5c>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <HAL_MspInit+0x5c>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b0c      	ldr	r3, [pc, #48]	; (80009fc <HAL_MspInit+0x5c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
=======
 8000cb6:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	4a14      	ldr	r2, [pc, #80]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cbc:	f043 0301 	orr.w	r3, r3, #1
 8000cc0:	6193      	str	r3, [r2, #24]
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	60bb      	str	r3, [r7, #8]
 8000ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cce:	4b0f      	ldr	r3, [pc, #60]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cd0:	69db      	ldr	r3, [r3, #28]
 8000cd2:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd8:	61d3      	str	r3, [r2, #28]
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <HAL_MspInit+0x5c>)
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
>>>>>>> local

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
<<<<<<< exercise_9
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <HAL_MspInit+0x60>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_MspInit+0x60>)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6053      	str	r3, [r2, #4]
=======
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <HAL_MspInit+0x60>)
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	4a04      	ldr	r2, [pc, #16]	; (8000d10 <HAL_MspInit+0x60>)
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	6053      	str	r3, [r2, #4]
>>>>>>> local

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< exercise_9
 80009f2:	bf00      	nop
 80009f4:	3714      	adds	r7, #20
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010000 	.word	0x40010000

08000a04 <HAL_TIM_Base_MspInit>:
=======
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr
 8000d0c:	40021000 	.word	0x40021000
 8000d10:	40010000 	.word	0x40010000

08000d14 <HAL_TIM_Base_MspInit>:
>>>>>>> local
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< exercise_9
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a14:	d113      	bne.n	8000a3e <HAL_TIM_Base_MspInit+0x3a>
=======
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d24:	d113      	bne.n	8000d4e <HAL_TIM_Base_MspInit+0x3a>
>>>>>>> local
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
<<<<<<< exercise_9
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_TIM_Base_MspInit+0x44>)
 8000a18:	69db      	ldr	r3, [r3, #28]
 8000a1a:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <HAL_TIM_Base_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	61d3      	str	r3, [r2, #28]
 8000a22:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <HAL_TIM_Base_MspInit+0x44>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2100      	movs	r1, #0
 8000a32:	201c      	movs	r0, #28
 8000a34:	f000 f9f1 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a38:	201c      	movs	r0, #28
 8000a3a:	f000 fa0a 	bl	8000e52 <HAL_NVIC_EnableIRQ>
=======
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_TIM_Base_MspInit+0x44>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <HAL_TIM_Base_MspInit+0x44>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <HAL_TIM_Base_MspInit+0x44>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	201c      	movs	r0, #28
 8000d44:	f000 f9f1 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d48:	201c      	movs	r0, #28
 8000d4a:	f000 fa0a 	bl	8001162 <HAL_NVIC_EnableIRQ>
>>>>>>> local
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
<<<<<<< exercise_9
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000

08000a4c <NMI_Handler>:
=======
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <NMI_Handler>:
>>>>>>> local
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< exercise_9
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
=======
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
>>>>>>> local
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< exercise_9
 8000a50:	e7fe      	b.n	8000a50 <NMI_Handler+0x4>

08000a52 <HardFault_Handler>:
=======
 8000d60:	e7fe      	b.n	8000d60 <NMI_Handler+0x4>

08000d62 <HardFault_Handler>:
>>>>>>> local

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< exercise_9
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
=======
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
>>>>>>> local
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< exercise_9
 8000a56:	e7fe      	b.n	8000a56 <HardFault_Handler+0x4>

08000a58 <MemManage_Handler>:
=======
 8000d66:	e7fe      	b.n	8000d66 <HardFault_Handler+0x4>

08000d68 <MemManage_Handler>:
>>>>>>> local

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< exercise_9
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
=======
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
>>>>>>> local
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< exercise_9
 8000a5c:	e7fe      	b.n	8000a5c <MemManage_Handler+0x4>

08000a5e <BusFault_Handler>:
=======
 8000d6c:	e7fe      	b.n	8000d6c <MemManage_Handler+0x4>

08000d6e <BusFault_Handler>:
>>>>>>> local

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< exercise_9
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
=======
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
>>>>>>> local
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< exercise_9
 8000a62:	e7fe      	b.n	8000a62 <BusFault_Handler+0x4>

08000a64 <UsageFault_Handler>:
=======
 8000d72:	e7fe      	b.n	8000d72 <BusFault_Handler+0x4>

08000d74 <UsageFault_Handler>:
>>>>>>> local

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< exercise_9
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
=======
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
>>>>>>> local
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< exercise_9
 8000a68:	e7fe      	b.n	8000a68 <UsageFault_Handler+0x4>

08000a6a <SVC_Handler>:
=======
 8000d78:	e7fe      	b.n	8000d78 <UsageFault_Handler+0x4>

08000d7a <SVC_Handler>:
>>>>>>> local

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< exercise_9
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
=======
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
>>>>>>> local

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< exercise_9
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <DebugMon_Handler>:
=======
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <DebugMon_Handler>:
>>>>>>> local

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< exercise_9
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
=======
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
>>>>>>> local

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< exercise_9
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:
=======
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:
>>>>>>> local

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< exercise_9
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
=======
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
>>>>>>> local

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< exercise_9
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <SysTick_Handler>:
=======
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr

08000d9e <SysTick_Handler>:
>>>>>>> local

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< exercise_9
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
=======
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	af00      	add	r7, sp, #0
>>>>>>> local
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< exercise_9
 8000a92:	f000 f8cf 	bl	8000c34 <HAL_IncTick>
=======
 8000da2:	f000 f8cf 	bl	8000f44 <HAL_IncTick>
>>>>>>> local
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< exercise_9
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <TIM2_IRQHandler>:
=======
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <TIM2_IRQHandler>:
>>>>>>> local

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< exercise_9
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
=======
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
>>>>>>> local
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< exercise_9
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM2_IRQHandler+0x10>)
 8000aa2:	f001 f815 	bl	8001ad0 <HAL_TIM_IRQHandler>
=======
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <TIM2_IRQHandler+0x10>)
 8000db2:	f001 f815 	bl	8001de0 <HAL_TIM_IRQHandler>
>>>>>>> local
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< exercise_9
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000006c 	.word	0x2000006c

08000ab0 <SystemInit>:
=======
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000078 	.word	0x20000078

08000dc0 <SystemInit>:
>>>>>>> local
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< exercise_9
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
=======
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
>>>>>>> local

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< exercise_9
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr

08000abc <set_timer>:
=======
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <set_timer>:
>>>>>>> local

int count_timer[MAX_FLAG] = {0};
int timer_flag[MAX_FLAG] = {0};

void set_timer(int duration, int idx)
{
<<<<<<< exercise_9
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
	count_timer[idx] = duration;
 8000ac6:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <set_timer+0x28>)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[idx] = 0;
 8000ad0:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <set_timer+0x2c>)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000058 	.word	0x20000058
 8000ae8:	20000044 	.word	0x20000044

08000aec <run_timer>:

void run_timer(int idx)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	if (count_timer[idx] > 0)
 8000af4:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <run_timer+0x48>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	dd13      	ble.n	8000b28 <run_timer+0x3c>
	{
		count_timer[idx]--;
 8000b00:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <run_timer+0x48>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b08:	1e5a      	subs	r2, r3, #1
 8000b0a:	490a      	ldr	r1, [pc, #40]	; (8000b34 <run_timer+0x48>)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (count_timer[idx] <= 0)
 8000b12:	4a08      	ldr	r2, [pc, #32]	; (8000b34 <run_timer+0x48>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	dc04      	bgt.n	8000b28 <run_timer+0x3c>
		{
			timer_flag[idx] = 1;
 8000b1e:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <run_timer+0x4c>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2101      	movs	r1, #1
 8000b24:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000058 	.word	0x20000058
 8000b38:	20000044 	.word	0x20000044

08000b3c <get_flag>:

int get_flag(int idx)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	return timer_flag[idx];
 8000b44:	4a04      	ldr	r2, [pc, #16]	; (8000b58 <get_flag+0x1c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000044 	.word	0x20000044

08000b5c <Reset_Handler>:
=======
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
	count_timer[idx] = duration;
 8000dd6:	4907      	ldr	r1, [pc, #28]	; (8000df4 <set_timer+0x28>)
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[idx] = 0;
 8000de0:	4a05      	ldr	r2, [pc, #20]	; (8000df8 <set_timer+0x2c>)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	2100      	movs	r1, #0
 8000de6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	20000064 	.word	0x20000064
 8000df8:	20000050 	.word	0x20000050

08000dfc <run_timer>:

void run_timer(int idx)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	if (count_timer[idx] > 0)
 8000e04:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <run_timer+0x48>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	dd13      	ble.n	8000e38 <run_timer+0x3c>
	{
		count_timer[idx]--;
 8000e10:	4a0c      	ldr	r2, [pc, #48]	; (8000e44 <run_timer+0x48>)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e18:	1e5a      	subs	r2, r3, #1
 8000e1a:	490a      	ldr	r1, [pc, #40]	; (8000e44 <run_timer+0x48>)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (count_timer[idx] <= 0)
 8000e22:	4a08      	ldr	r2, [pc, #32]	; (8000e44 <run_timer+0x48>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	dc04      	bgt.n	8000e38 <run_timer+0x3c>
		{
			timer_flag[idx] = 1;
 8000e2e:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <run_timer+0x4c>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2101      	movs	r1, #1
 8000e34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bc80      	pop	{r7}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	20000064 	.word	0x20000064
 8000e48:	20000050 	.word	0x20000050

08000e4c <get_flag>:

int get_flag(int idx)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	return timer_flag[idx];
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <get_flag+0x1c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bc80      	pop	{r7}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	20000050 	.word	0x20000050

08000e6c <Reset_Handler>:
>>>>>>> local
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
<<<<<<< exercise_9
 8000b5c:	f7ff ffa8 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480b      	ldr	r0, [pc, #44]	; (8000b90 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b62:	490c      	ldr	r1, [pc, #48]	; (8000b94 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b64:	4a0c      	ldr	r2, [pc, #48]	; (8000b98 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a09      	ldr	r2, [pc, #36]	; (8000b9c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b78:	4c09      	ldr	r4, [pc, #36]	; (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b86:	f001 faef 	bl	8002168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8a:	f7ff fd7f 	bl	800068c <main>
  bx lr
 8000b8e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000b98:	08002204 	.word	0x08002204
  ldr r2, =_sbss
 8000b9c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ba0:	200000b8 	.word	0x200000b8

08000ba4 <ADC1_2_IRQHandler>:
=======
 8000e6c:	f7ff ffa8 	bl	8000dc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e72:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e74:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e88:	4c09      	ldr	r4, [pc, #36]	; (8000eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f001 faef 	bl	8002478 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9a:	f7ff fd69 	bl	8000970 <main>
  bx lr
 8000e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000ea8:	08002514 	.word	0x08002514
  ldr r2, =_sbss
 8000eac:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000eb0:	200000c4 	.word	0x200000c4

08000eb4 <ADC1_2_IRQHandler>:
>>>>>>> local
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< exercise_9
 8000ba4:	e7fe      	b.n	8000ba4 <ADC1_2_IRQHandler>
	...

08000ba8 <HAL_Init>:
=======
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>
	...

08000eb8 <HAL_Init>:
>>>>>>> local
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< exercise_9
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
=======
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
>>>>>>> local
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< exercise_9
 8000bac:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <HAL_Init+0x28>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a07      	ldr	r2, [pc, #28]	; (8000bd0 <HAL_Init+0x28>)
 8000bb2:	f043 0310 	orr.w	r3, r3, #16
 8000bb6:	6013      	str	r3, [r2, #0]
=======
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_Init+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x28>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6013      	str	r3, [r2, #0]
>>>>>>> local
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< exercise_9
 8000bb8:	2003      	movs	r0, #3
 8000bba:	f000 f923 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbe:	200f      	movs	r0, #15
 8000bc0:	f000 f808 	bl	8000bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc4:	f7ff feec 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_InitTick>:
=======
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f923 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff feec 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <HAL_InitTick>:
>>>>>>> local
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< exercise_9
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_InitTick+0x54>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x58>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 f93b 	bl	8000e6e <HAL_SYSTICK_Config>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e00e      	b.n	8000c20 <HAL_InitTick+0x4c>
=======
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f93b 	bl	800117e <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
>>>>>>> local
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< exercise_9
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d80a      	bhi.n	8000c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	f000 f903 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c14:	4a06      	ldr	r2, [pc, #24]	; (8000c30 <HAL_InitTick+0x5c>)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6013      	str	r3, [r2, #0]
=======
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f903 	bl	800112a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
>>>>>>> local
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< exercise_9
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	e000      	b.n	8000c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	20000010 	.word	0x20000010
 8000c2c:	20000018 	.word	0x20000018
 8000c30:	20000014 	.word	0x20000014

08000c34 <HAL_IncTick>:
=======
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000018 	.word	0x20000018
 8000f3c:	20000020 	.word	0x20000020
 8000f40:	2000001c 	.word	0x2000001c

08000f44 <HAL_IncTick>:
>>>>>>> local
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< exercise_9
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x1c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x20>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a03      	ldr	r2, [pc, #12]	; (8000c54 <HAL_IncTick+0x20>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000018 	.word	0x20000018
 8000c54:	200000b4 	.word	0x200000b4

08000c58 <HAL_GetTick>:
=======
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x1c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x20>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <HAL_IncTick+0x20>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000020 	.word	0x20000020
 8000f64:	200000c0 	.word	0x200000c0

08000f68 <HAL_GetTick>:
>>>>>>> local
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< exercise_9
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b02      	ldr	r3, [pc, #8]	; (8000c68 <HAL_GetTick+0x10>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	200000b4 	.word	0x200000b4

08000c6c <__NVIC_SetPriorityGrouping>:
=======
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <HAL_GetTick+0x10>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	200000c0 	.word	0x200000c0

08000f7c <__NVIC_SetPriorityGrouping>:
>>>>>>> local
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< exercise_9
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c82:	68ba      	ldr	r2, [r7, #8]
 8000c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	60d3      	str	r3, [r2, #12]
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <__NVIC_GetPriorityGrouping>:
=======
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
>>>>>>> local
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< exercise_9
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <__NVIC_GetPriorityGrouping+0x18>)
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	0a1b      	lsrs	r3, r3, #8
 8000cbe:	f003 0307 	and.w	r3, r3, #7
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_EnableIRQ>:
=======
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_EnableIRQ>:
>>>>>>> local
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< exercise_9
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	db0b      	blt.n	8000cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	f003 021f 	and.w	r2, r3, #31
 8000ce8:	4906      	ldr	r1, [pc, #24]	; (8000d04 <__NVIC_EnableIRQ+0x34>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	095b      	lsrs	r3, r3, #5
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	e000e100 	.word	0xe000e100

08000d08 <__NVIC_SetPriority>:
=======
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	db0b      	blt.n	800100a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	f003 021f 	and.w	r2, r3, #31
 8000ff8:	4906      	ldr	r1, [pc, #24]	; (8001014 <__NVIC_EnableIRQ+0x34>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	095b      	lsrs	r3, r3, #5
 8001000:	2001      	movs	r0, #1
 8001002:	fa00 f202 	lsl.w	r2, r0, r2
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100

08001018 <__NVIC_SetPriority>:
>>>>>>> local
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< exercise_9
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	db0a      	blt.n	8000d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	490c      	ldr	r1, [pc, #48]	; (8000d54 <__NVIC_SetPriority+0x4c>)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	0112      	lsls	r2, r2, #4
 8000d28:	b2d2      	uxtb	r2, r2
 8000d2a:	440b      	add	r3, r1
 8000d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> local
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< exercise_9
 8000d30:	e00a      	b.n	8000d48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4908      	ldr	r1, [pc, #32]	; (8000d58 <__NVIC_SetPriority+0x50>)
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	f003 030f 	and.w	r3, r3, #15
 8000d3e:	3b04      	subs	r3, #4
 8000d40:	0112      	lsls	r2, r2, #4
 8000d42:	b2d2      	uxtb	r2, r2
 8000d44:	440b      	add	r3, r1
 8000d46:	761a      	strb	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <NVIC_EncodePriority>:
=======
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
>>>>>>> local
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< exercise_9
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	61fb      	str	r3, [r7, #28]
=======
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
>>>>>>> local
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< exercise_9
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	f1c3 0307 	rsb	r3, r3, #7
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	bf28      	it	cs
 8000d7a:	2304      	movcs	r3, #4
 8000d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	3304      	adds	r3, #4
 8000d82:	2b06      	cmp	r3, #6
 8000d84:	d902      	bls.n	8000d8c <NVIC_EncodePriority+0x30>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	3b03      	subs	r3, #3
 8000d8a:	e000      	b.n	8000d8e <NVIC_EncodePriority+0x32>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d90:	f04f 32ff 	mov.w	r2, #4294967295
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	401a      	ands	r2, r3
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da4:	f04f 31ff 	mov.w	r1, #4294967295
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dae:	43d9      	mvns	r1, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	4313      	orrs	r3, r2
         );
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Config>:
=======
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr

080010d0 <SysTick_Config>:
>>>>>>> local
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< exercise_9
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff90 	bl	8000d08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
=======
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff90 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	; (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	; (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> local
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< exercise_9
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
=======
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
>>>>>>> local
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< exercise_9
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff2d 	bl	8000c6c <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
=======
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff2d 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
>>>>>>> local
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< exercise_9
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
=======
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
>>>>>>> local
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< exercise_9
 8000e2c:	f7ff ff42 	bl	8000cb4 <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff90 	bl	8000d5c <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5f 	bl	8000d08 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
=======
 800113c:	f7ff ff42 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff90 	bl	800106c <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5f 	bl	8001018 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
>>>>>>> local
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< exercise_9
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
=======
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
>>>>>>> local
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< exercise_9
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff35 	bl	8000cd0 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
=======
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff35 	bl	8000fe0 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
>>>>>>> local
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< exercise_9
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_GPIO_Init>:
=======
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <HAL_GPIO_Init>:
>>>>>>> local
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< exercise_9
 8000e88:	b480      	push	{r7}
 8000e8a:	b08b      	sub	sp, #44	; 0x2c
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8001198:	b480      	push	{r7}
 800119a:	b08b      	sub	sp, #44	; 0x2c
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> local
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< exercise_9
 8000e96:	2300      	movs	r3, #0
 8000e98:	623b      	str	r3, [r7, #32]
=======
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
>>>>>>> local
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< exercise_9
 8000e9a:	e148      	b.n	800112e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	f040 8137 	bne.w	8001128 <HAL_GPIO_Init+0x2a0>
=======
 80011aa:	e148      	b.n	800143e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011ac:	2201      	movs	r2, #1
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	f040 8137 	bne.w	8001438 <HAL_GPIO_Init+0x2a0>
>>>>>>> local
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< exercise_9
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	4aa3      	ldr	r2, [pc, #652]	; (800114c <HAL_GPIO_Init+0x2c4>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d05e      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ec4:	4aa1      	ldr	r2, [pc, #644]	; (800114c <HAL_GPIO_Init+0x2c4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d875      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000eca:	4aa1      	ldr	r2, [pc, #644]	; (8001150 <HAL_GPIO_Init+0x2c8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d058      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ed0:	4a9f      	ldr	r2, [pc, #636]	; (8001150 <HAL_GPIO_Init+0x2c8>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d86f      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000ed6:	4a9f      	ldr	r2, [pc, #636]	; (8001154 <HAL_GPIO_Init+0x2cc>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d052      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000edc:	4a9d      	ldr	r2, [pc, #628]	; (8001154 <HAL_GPIO_Init+0x2cc>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d869      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000ee2:	4a9d      	ldr	r2, [pc, #628]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d04c      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ee8:	4a9b      	ldr	r2, [pc, #620]	; (8001158 <HAL_GPIO_Init+0x2d0>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d863      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000eee:	4a9b      	ldr	r2, [pc, #620]	; (800115c <HAL_GPIO_Init+0x2d4>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d046      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
 8000ef4:	4a99      	ldr	r2, [pc, #612]	; (800115c <HAL_GPIO_Init+0x2d4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d85d      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d82a      	bhi.n	8000f54 <HAL_GPIO_Init+0xcc>
 8000efe:	2b12      	cmp	r3, #18
 8000f00:	d859      	bhi.n	8000fb6 <HAL_GPIO_Init+0x12e>
 8000f02:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <HAL_GPIO_Init+0x80>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f83 	.word	0x08000f83
 8000f0c:	08000f5d 	.word	0x08000f5d
 8000f10:	08000f6f 	.word	0x08000f6f
 8000f14:	08000fb1 	.word	0x08000fb1
 8000f18:	08000fb7 	.word	0x08000fb7
 8000f1c:	08000fb7 	.word	0x08000fb7
 8000f20:	08000fb7 	.word	0x08000fb7
 8000f24:	08000fb7 	.word	0x08000fb7
 8000f28:	08000fb7 	.word	0x08000fb7
 8000f2c:	08000fb7 	.word	0x08000fb7
 8000f30:	08000fb7 	.word	0x08000fb7
 8000f34:	08000fb7 	.word	0x08000fb7
 8000f38:	08000fb7 	.word	0x08000fb7
 8000f3c:	08000fb7 	.word	0x08000fb7
 8000f40:	08000fb7 	.word	0x08000fb7
 8000f44:	08000fb7 	.word	0x08000fb7
 8000f48:	08000fb7 	.word	0x08000fb7
 8000f4c:	08000f65 	.word	0x08000f65
 8000f50:	08000f79 	.word	0x08000f79
 8000f54:	4a82      	ldr	r2, [pc, #520]	; (8001160 <HAL_GPIO_Init+0x2d8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0xfa>
=======
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	4aa3      	ldr	r2, [pc, #652]	; (800145c <HAL_GPIO_Init+0x2c4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d05e      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011d4:	4aa1      	ldr	r2, [pc, #644]	; (800145c <HAL_GPIO_Init+0x2c4>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d875      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011da:	4aa1      	ldr	r2, [pc, #644]	; (8001460 <HAL_GPIO_Init+0x2c8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d058      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011e0:	4a9f      	ldr	r2, [pc, #636]	; (8001460 <HAL_GPIO_Init+0x2c8>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d86f      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011e6:	4a9f      	ldr	r2, [pc, #636]	; (8001464 <HAL_GPIO_Init+0x2cc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d052      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011ec:	4a9d      	ldr	r2, [pc, #628]	; (8001464 <HAL_GPIO_Init+0x2cc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d869      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011f2:	4a9d      	ldr	r2, [pc, #628]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d04c      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 80011f8:	4a9b      	ldr	r2, [pc, #620]	; (8001468 <HAL_GPIO_Init+0x2d0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d863      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 80011fe:	4a9b      	ldr	r2, [pc, #620]	; (800146c <HAL_GPIO_Init+0x2d4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d046      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
 8001204:	4a99      	ldr	r2, [pc, #612]	; (800146c <HAL_GPIO_Init+0x2d4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d85d      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 800120a:	2b12      	cmp	r3, #18
 800120c:	d82a      	bhi.n	8001264 <HAL_GPIO_Init+0xcc>
 800120e:	2b12      	cmp	r3, #18
 8001210:	d859      	bhi.n	80012c6 <HAL_GPIO_Init+0x12e>
 8001212:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <HAL_GPIO_Init+0x80>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	08001293 	.word	0x08001293
 800121c:	0800126d 	.word	0x0800126d
 8001220:	0800127f 	.word	0x0800127f
 8001224:	080012c1 	.word	0x080012c1
 8001228:	080012c7 	.word	0x080012c7
 800122c:	080012c7 	.word	0x080012c7
 8001230:	080012c7 	.word	0x080012c7
 8001234:	080012c7 	.word	0x080012c7
 8001238:	080012c7 	.word	0x080012c7
 800123c:	080012c7 	.word	0x080012c7
 8001240:	080012c7 	.word	0x080012c7
 8001244:	080012c7 	.word	0x080012c7
 8001248:	080012c7 	.word	0x080012c7
 800124c:	080012c7 	.word	0x080012c7
 8001250:	080012c7 	.word	0x080012c7
 8001254:	080012c7 	.word	0x080012c7
 8001258:	080012c7 	.word	0x080012c7
 800125c:	08001275 	.word	0x08001275
 8001260:	08001289 	.word	0x08001289
 8001264:	4a82      	ldr	r2, [pc, #520]	; (8001470 <HAL_GPIO_Init+0x2d8>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d013      	beq.n	8001292 <HAL_GPIO_Init+0xfa>
>>>>>>> local
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< exercise_9
 8000f5a:	e02c      	b.n	8000fb6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	623b      	str	r3, [r7, #32]
          break;
 8000f62:	e029      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	623b      	str	r3, [r7, #32]
          break;
 8000f6c:	e024      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	3308      	adds	r3, #8
 8000f74:	623b      	str	r3, [r7, #32]
          break;
 8000f76:	e01f      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	330c      	adds	r3, #12
 8000f7e:	623b      	str	r3, [r7, #32]
          break;
 8000f80:	e01a      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d102      	bne.n	8000f90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	623b      	str	r3, [r7, #32]
          break;
 8000f8e:	e013      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d105      	bne.n	8000fa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f98:	2308      	movs	r3, #8
 8000f9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	611a      	str	r2, [r3, #16]
          break;
 8000fa2:	e009      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	69fa      	ldr	r2, [r7, #28]
 8000fac:	615a      	str	r2, [r3, #20]
          break;
 8000fae:	e003      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	623b      	str	r3, [r7, #32]
          break;
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x130>
          break;
 8000fb6:	bf00      	nop
=======
 800126a:	e02c      	b.n	80012c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e029      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	3304      	adds	r3, #4
 800127a:	623b      	str	r3, [r7, #32]
          break;
 800127c:	e024      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	3308      	adds	r3, #8
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e01f      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	330c      	adds	r3, #12
 800128e:	623b      	str	r3, [r7, #32]
          break;
 8001290:	e01a      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d102      	bne.n	80012a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800129a:	2304      	movs	r3, #4
 800129c:	623b      	str	r3, [r7, #32]
          break;
 800129e:	e013      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d105      	bne.n	80012b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a8:	2308      	movs	r3, #8
 80012aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69fa      	ldr	r2, [r7, #28]
 80012b0:	611a      	str	r2, [r3, #16]
          break;
 80012b2:	e009      	b.n	80012c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012b4:	2308      	movs	r3, #8
 80012b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	615a      	str	r2, [r3, #20]
          break;
 80012be:	e003      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012c0:	2300      	movs	r3, #0
 80012c2:	623b      	str	r3, [r7, #32]
          break;
 80012c4:	e000      	b.n	80012c8 <HAL_GPIO_Init+0x130>
          break;
 80012c6:	bf00      	nop
>>>>>>> local
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< exercise_9
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2bff      	cmp	r3, #255	; 0xff
 8000fbc:	d801      	bhi.n	8000fc2 <HAL_GPIO_Init+0x13a>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	e001      	b.n	8000fc6 <HAL_GPIO_Init+0x13e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	2bff      	cmp	r3, #255	; 0xff
 8000fcc:	d802      	bhi.n	8000fd4 <HAL_GPIO_Init+0x14c>
 8000fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	e002      	b.n	8000fda <HAL_GPIO_Init+0x152>
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	3b08      	subs	r3, #8
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	401a      	ands	r2, r3
 8000fec:	6a39      	ldr	r1, [r7, #32]
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	601a      	str	r2, [r3, #0]
=======
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d801      	bhi.n	80012d2 <HAL_GPIO_Init+0x13a>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	e001      	b.n	80012d6 <HAL_GPIO_Init+0x13e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3304      	adds	r3, #4
 80012d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2bff      	cmp	r3, #255	; 0xff
 80012dc:	d802      	bhi.n	80012e4 <HAL_GPIO_Init+0x14c>
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	e002      	b.n	80012ea <HAL_GPIO_Init+0x152>
 80012e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e6:	3b08      	subs	r3, #8
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	210f      	movs	r1, #15
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	401a      	ands	r2, r3
 80012fc:	6a39      	ldr	r1, [r7, #32]
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	431a      	orrs	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]
>>>>>>> local

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< exercise_9
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8090 	beq.w	8001128 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001008:	4b56      	ldr	r3, [pc, #344]	; (8001164 <HAL_GPIO_Init+0x2dc>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a55      	ldr	r2, [pc, #340]	; (8001164 <HAL_GPIO_Init+0x2dc>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b53      	ldr	r3, [pc, #332]	; (8001164 <HAL_GPIO_Init+0x2dc>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001020:	4a51      	ldr	r2, [pc, #324]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001024:	089b      	lsrs	r3, r3, #2
 8001026:	3302      	adds	r3, #2
 8001028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	f003 0303 	and.w	r3, r3, #3
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	4013      	ands	r3, r2
 8001042:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a49      	ldr	r2, [pc, #292]	; (800116c <HAL_GPIO_Init+0x2e4>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d00d      	beq.n	8001068 <HAL_GPIO_Init+0x1e0>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a48      	ldr	r2, [pc, #288]	; (8001170 <HAL_GPIO_Init+0x2e8>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d007      	beq.n	8001064 <HAL_GPIO_Init+0x1dc>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a47      	ldr	r2, [pc, #284]	; (8001174 <HAL_GPIO_Init+0x2ec>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d101      	bne.n	8001060 <HAL_GPIO_Init+0x1d8>
 800105c:	2302      	movs	r3, #2
 800105e:	e004      	b.n	800106a <HAL_GPIO_Init+0x1e2>
 8001060:	2303      	movs	r3, #3
 8001062:	e002      	b.n	800106a <HAL_GPIO_Init+0x1e2>
 8001064:	2301      	movs	r3, #1
 8001066:	e000      	b.n	800106a <HAL_GPIO_Init+0x1e2>
 8001068:	2300      	movs	r3, #0
 800106a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800106c:	f002 0203 	and.w	r2, r2, #3
 8001070:	0092      	lsls	r2, r2, #2
 8001072:	4093      	lsls	r3, r2
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800107a:	493b      	ldr	r1, [pc, #236]	; (8001168 <HAL_GPIO_Init+0x2e0>)
 800107c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	3302      	adds	r3, #2
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8090 	beq.w	8001438 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001318:	4b56      	ldr	r3, [pc, #344]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a55      	ldr	r2, [pc, #340]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 800131e:	f043 0301 	orr.w	r3, r3, #1
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b53      	ldr	r3, [pc, #332]	; (8001474 <HAL_GPIO_Init+0x2dc>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001330:	4a51      	ldr	r2, [pc, #324]	; (8001478 <HAL_GPIO_Init+0x2e0>)
 8001332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	220f      	movs	r2, #15
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	4013      	ands	r3, r2
 8001352:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a49      	ldr	r2, [pc, #292]	; (800147c <HAL_GPIO_Init+0x2e4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d00d      	beq.n	8001378 <HAL_GPIO_Init+0x1e0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	4a48      	ldr	r2, [pc, #288]	; (8001480 <HAL_GPIO_Init+0x2e8>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d007      	beq.n	8001374 <HAL_GPIO_Init+0x1dc>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a47      	ldr	r2, [pc, #284]	; (8001484 <HAL_GPIO_Init+0x2ec>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d101      	bne.n	8001370 <HAL_GPIO_Init+0x1d8>
 800136c:	2302      	movs	r3, #2
 800136e:	e004      	b.n	800137a <HAL_GPIO_Init+0x1e2>
 8001370:	2303      	movs	r3, #3
 8001372:	e002      	b.n	800137a <HAL_GPIO_Init+0x1e2>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <HAL_GPIO_Init+0x1e2>
 8001378:	2300      	movs	r3, #0
 800137a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800137c:	f002 0203 	and.w	r2, r2, #3
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	4093      	lsls	r3, r2
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800138a:	493b      	ldr	r1, [pc, #236]	; (8001478 <HAL_GPIO_Init+0x2e0>)
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> local


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< exercise_9
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d006      	beq.n	80010a2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001094:	4b38      	ldr	r3, [pc, #224]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	4937      	ldr	r1, [pc, #220]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4313      	orrs	r3, r2
 800109e:	608b      	str	r3, [r1, #8]
 80010a0:	e006      	b.n	80010b0 <HAL_GPIO_Init+0x228>
=======
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013a4:	4b38      	ldr	r3, [pc, #224]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	4937      	ldr	r1, [pc, #220]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	608b      	str	r3, [r1, #8]
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x228>
>>>>>>> local
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< exercise_9
 80010a2:	4b35      	ldr	r3, [pc, #212]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	4933      	ldr	r1, [pc, #204]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 80010ac:	4013      	ands	r3, r2
 80010ae:	608b      	str	r3, [r1, #8]
=======
 80013b2:	4b35      	ldr	r3, [pc, #212]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	4933      	ldr	r1, [pc, #204]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 80013bc:	4013      	ands	r3, r2
 80013be:	608b      	str	r3, [r1, #8]
>>>>>>> local
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< exercise_9
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d006      	beq.n	80010ca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010bc:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	492d      	ldr	r1, [pc, #180]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	60cb      	str	r3, [r1, #12]
 80010c8:	e006      	b.n	80010d8 <HAL_GPIO_Init+0x250>
=======
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013cc:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 80013ce:	68da      	ldr	r2, [r3, #12]
 80013d0:	492d      	ldr	r1, [pc, #180]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	60cb      	str	r3, [r1, #12]
 80013d8:	e006      	b.n	80013e8 <HAL_GPIO_Init+0x250>
>>>>>>> local
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< exercise_9
 80010ca:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	4929      	ldr	r1, [pc, #164]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	60cb      	str	r3, [r1, #12]
=======
 80013da:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	4929      	ldr	r1, [pc, #164]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 80013e4:	4013      	ands	r3, r2
 80013e6:	60cb      	str	r3, [r1, #12]
>>>>>>> local
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< exercise_9
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d006      	beq.n	80010f2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 80010e6:	685a      	ldr	r2, [r3, #4]
 80010e8:	4923      	ldr	r1, [pc, #140]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	604b      	str	r3, [r1, #4]
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x278>
=======
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d006      	beq.n	8001402 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	4923      	ldr	r1, [pc, #140]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
 8001400:	e006      	b.n	8001410 <HAL_GPIO_Init+0x278>
>>>>>>> local
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< exercise_9
 80010f2:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	491f      	ldr	r1, [pc, #124]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]
=======
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	43db      	mvns	r3, r3
 800140a:	491f      	ldr	r1, [pc, #124]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 800140c:	4013      	ands	r3, r2
 800140e:	604b      	str	r3, [r1, #4]
>>>>>>> local
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< exercise_9
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d006      	beq.n	800111a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4919      	ldr	r1, [pc, #100]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	4313      	orrs	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x2a0>
=======
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d006      	beq.n	800142a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800141c:	4b1a      	ldr	r3, [pc, #104]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4919      	ldr	r1, [pc, #100]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	4313      	orrs	r3, r2
 8001426:	600b      	str	r3, [r1, #0]
 8001428:	e006      	b.n	8001438 <HAL_GPIO_Init+0x2a0>
>>>>>>> local
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< exercise_9
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	43db      	mvns	r3, r3
 8001122:	4915      	ldr	r1, [pc, #84]	; (8001178 <HAL_GPIO_Init+0x2f0>)
 8001124:	4013      	ands	r3, r2
 8001126:	600b      	str	r3, [r1, #0]
=======
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	43db      	mvns	r3, r3
 8001432:	4915      	ldr	r1, [pc, #84]	; (8001488 <HAL_GPIO_Init+0x2f0>)
 8001434:	4013      	ands	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
>>>>>>> local
        }
      }
    }

	position++;
<<<<<<< exercise_9
 8001128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112a:	3301      	adds	r3, #1
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	fa22 f303 	lsr.w	r3, r2, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	f47f aeaf 	bne.w	8000e9c <HAL_GPIO_Init+0x14>
  }
}
 800113e:	bf00      	nop
 8001140:	bf00      	nop
 8001142:	372c      	adds	r7, #44	; 0x2c
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	10320000 	.word	0x10320000
 8001150:	10310000 	.word	0x10310000
 8001154:	10220000 	.word	0x10220000
 8001158:	10210000 	.word	0x10210000
 800115c:	10120000 	.word	0x10120000
 8001160:	10110000 	.word	0x10110000
 8001164:	40021000 	.word	0x40021000
 8001168:	40010000 	.word	0x40010000
 800116c:	40010800 	.word	0x40010800
 8001170:	40010c00 	.word	0x40010c00
 8001174:	40011000 	.word	0x40011000
 8001178:	40010400 	.word	0x40010400

0800117c <HAL_GPIO_WritePin>:
=======
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	3301      	adds	r3, #1
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	fa22 f303 	lsr.w	r3, r2, r3
 8001448:	2b00      	cmp	r3, #0
 800144a:	f47f aeaf 	bne.w	80011ac <HAL_GPIO_Init+0x14>
  }
}
 800144e:	bf00      	nop
 8001450:	bf00      	nop
 8001452:	372c      	adds	r7, #44	; 0x2c
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	10320000 	.word	0x10320000
 8001460:	10310000 	.word	0x10310000
 8001464:	10220000 	.word	0x10220000
 8001468:	10210000 	.word	0x10210000
 800146c:	10120000 	.word	0x10120000
 8001470:	10110000 	.word	0x10110000
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	40010800 	.word	0x40010800
 8001480:	40010c00 	.word	0x40010c00
 8001484:	40011000 	.word	0x40011000
 8001488:	40010400 	.word	0x40010400

0800148c <HAL_GPIO_WritePin>:
>>>>>>> local
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< exercise_9
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
=======
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
 8001498:	4613      	mov	r3, r2
 800149a:	707b      	strb	r3, [r7, #1]
>>>>>>> local
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< exercise_9
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	611a      	str	r2, [r3, #16]
=======
 800149c:	787b      	ldrb	r3, [r7, #1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a2:	887a      	ldrh	r2, [r7, #2]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	611a      	str	r2, [r3, #16]
>>>>>>> local
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< exercise_9
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	041a      	lsls	r2, r3, #16
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	611a      	str	r2, [r3, #16]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <HAL_GPIO_TogglePin>:
=======
 80014a8:	e003      	b.n	80014b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	041a      	lsls	r2, r3, #16
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	611a      	str	r2, [r3, #16]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr

080014bc <HAL_GPIO_TogglePin>:
>>>>>>> local
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< exercise_9
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
=======
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
>>>>>>> local

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< exercise_9
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011be:	887a      	ldrh	r2, [r7, #2]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4013      	ands	r3, r2
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	43d9      	mvns	r1, r3
 80011ca:	887b      	ldrh	r3, [r7, #2]
 80011cc:	400b      	ands	r3, r1
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	611a      	str	r2, [r3, #16]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
	...

080011e0 <HAL_RCC_OscConfig>:
=======
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014ce:	887a      	ldrh	r2, [r7, #2]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4013      	ands	r3, r2
 80014d4:	041a      	lsls	r2, r3, #16
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43d9      	mvns	r1, r3
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	400b      	ands	r3, r1
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	611a      	str	r2, [r3, #16]
}
 80014e4:	bf00      	nop
 80014e6:	3714      	adds	r7, #20
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
	...

080014f0 <HAL_RCC_OscConfig>:
>>>>>>> local
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< exercise_9
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
=======
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
>>>>>>> local
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< exercise_9
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e26c      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
=======
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e26c      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
>>>>>>> local

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< exercise_9
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 8087 	beq.w	800130e <HAL_RCC_OscConfig+0x12e>
=======
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8087 	beq.w	800161e <HAL_RCC_OscConfig+0x12e>
>>>>>>> local
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< exercise_9
 8001200:	4b92      	ldr	r3, [pc, #584]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	2b04      	cmp	r3, #4
 800120a:	d00c      	beq.n	8001226 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800120c:	4b8f      	ldr	r3, [pc, #572]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 030c 	and.w	r3, r3, #12
 8001214:	2b08      	cmp	r3, #8
 8001216:	d112      	bne.n	800123e <HAL_RCC_OscConfig+0x5e>
 8001218:	4b8c      	ldr	r3, [pc, #560]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001224:	d10b      	bne.n	800123e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001226:	4b89      	ldr	r3, [pc, #548]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d06c      	beq.n	800130c <HAL_RCC_OscConfig+0x12c>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d168      	bne.n	800130c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e246      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
=======
 8001510:	4b92      	ldr	r3, [pc, #584]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	2b04      	cmp	r3, #4
 800151a:	d00c      	beq.n	8001536 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800151c:	4b8f      	ldr	r3, [pc, #572]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d112      	bne.n	800154e <HAL_RCC_OscConfig+0x5e>
 8001528:	4b8c      	ldr	r3, [pc, #560]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001534:	d10b      	bne.n	800154e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001536:	4b89      	ldr	r3, [pc, #548]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d06c      	beq.n	800161c <HAL_RCC_OscConfig+0x12c>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d168      	bne.n	800161c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e246      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
>>>>>>> local
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< exercise_9
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x76>
 8001248:	4b80      	ldr	r3, [pc, #512]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a7f      	ldr	r2, [pc, #508]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800124e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e02e      	b.n	80012b4 <HAL_RCC_OscConfig+0xd4>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10c      	bne.n	8001278 <HAL_RCC_OscConfig+0x98>
 800125e:	4b7b      	ldr	r3, [pc, #492]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a7a      	ldr	r2, [pc, #488]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001264:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b78      	ldr	r3, [pc, #480]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a77      	ldr	r2, [pc, #476]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001270:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e01d      	b.n	80012b4 <HAL_RCC_OscConfig+0xd4>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001280:	d10c      	bne.n	800129c <HAL_RCC_OscConfig+0xbc>
 8001282:	4b72      	ldr	r3, [pc, #456]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a71      	ldr	r2, [pc, #452]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	4b6f      	ldr	r3, [pc, #444]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a6e      	ldr	r2, [pc, #440]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001298:	6013      	str	r3, [r2, #0]
 800129a:	e00b      	b.n	80012b4 <HAL_RCC_OscConfig+0xd4>
 800129c:	4b6b      	ldr	r3, [pc, #428]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a6a      	ldr	r2, [pc, #424]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80012a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b68      	ldr	r3, [pc, #416]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a67      	ldr	r2, [pc, #412]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80012ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012b2:	6013      	str	r3, [r2, #0]
=======
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x76>
 8001558:	4b80      	ldr	r3, [pc, #512]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a7f      	ldr	r2, [pc, #508]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800155e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e02e      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x98>
 800156e:	4b7b      	ldr	r3, [pc, #492]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7a      	ldr	r2, [pc, #488]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001574:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b78      	ldr	r3, [pc, #480]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a77      	ldr	r2, [pc, #476]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001580:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e01d      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0xbc>
 8001592:	4b72      	ldr	r3, [pc, #456]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a71      	ldr	r2, [pc, #452]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b6f      	ldr	r3, [pc, #444]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a6e      	ldr	r2, [pc, #440]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0xd4>
 80015ac:	4b6b      	ldr	r3, [pc, #428]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a6a      	ldr	r2, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b68      	ldr	r3, [pc, #416]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a67      	ldr	r2, [pc, #412]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c2:	6013      	str	r3, [r2, #0]
>>>>>>> local


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< exercise_9
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012bc:	f7ff fccc 	bl	8000c58 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c4:	f7ff fcc8 	bl	8000c58 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b64      	cmp	r3, #100	; 0x64
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e1fa      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d6:	4b5d      	ldr	r3, [pc, #372]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0xe4>
 80012e2:	e014      	b.n	800130e <HAL_RCC_OscConfig+0x12e>
=======
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fccc 	bl	8000f68 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fcc8 	bl	8000f68 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1fa      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b5d      	ldr	r3, [pc, #372]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0xe4>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
>>>>>>> local
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< exercise_9
 80012e4:	f7ff fcb8 	bl	8000c58 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fcb4 	bl	8000c58 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e1e6      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f0      	bne.n	80012ec <HAL_RCC_OscConfig+0x10c>
 800130a:	e000      	b.n	800130e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800130c:	bf00      	nop
=======
 80015f4:	f7ff fcb8 	bl	8000f68 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fcb4 	bl	8000f68 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1e6      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x10c>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
>>>>>>> local
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< exercise_9
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d063      	beq.n	80013e2 <HAL_RCC_OscConfig+0x202>
=======
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d063      	beq.n	80016f2 <HAL_RCC_OscConfig+0x202>
>>>>>>> local
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< exercise_9
 800131a:	4b4c      	ldr	r3, [pc, #304]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00b      	beq.n	800133e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001326:	4b49      	ldr	r3, [pc, #292]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	2b08      	cmp	r3, #8
 8001330:	d11c      	bne.n	800136c <HAL_RCC_OscConfig+0x18c>
 8001332:	4b46      	ldr	r3, [pc, #280]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d116      	bne.n	800136c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133e:	4b43      	ldr	r3, [pc, #268]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d005      	beq.n	8001356 <HAL_RCC_OscConfig+0x176>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	2b01      	cmp	r3, #1
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1ba      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
=======
 800162a:	4b4c      	ldr	r3, [pc, #304]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001636:	4b49      	ldr	r3, [pc, #292]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b08      	cmp	r3, #8
 8001640:	d11c      	bne.n	800167c <HAL_RCC_OscConfig+0x18c>
 8001642:	4b46      	ldr	r3, [pc, #280]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d116      	bne.n	800167c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	4b43      	ldr	r3, [pc, #268]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_RCC_OscConfig+0x176>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e1ba      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
>>>>>>> local
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< exercise_9
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4939      	ldr	r1, [pc, #228]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001366:	4313      	orrs	r3, r2
 8001368:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136a:	e03a      	b.n	80013e2 <HAL_RCC_OscConfig+0x202>
=======
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4939      	ldr	r1, [pc, #228]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	e03a      	b.n	80016f2 <HAL_RCC_OscConfig+0x202>
>>>>>>> local
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< exercise_9
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d020      	beq.n	80013b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001374:	4b36      	ldr	r3, [pc, #216]	; (8001450 <HAL_RCC_OscConfig+0x270>)
 8001376:	2201      	movs	r2, #1
 8001378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137a:	f7ff fc6d 	bl	8000c58 <HAL_GetTick>
 800137e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fc69 	bl	8000c58 <HAL_GetTick>
 8001386:	4602      	mov	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e19b      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x1a2>
=======
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	691b      	ldr	r3, [r3, #16]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001684:	4b36      	ldr	r3, [pc, #216]	; (8001760 <HAL_RCC_OscConfig+0x270>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff fc6d 	bl	8000f68 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fc69 	bl	8000f68 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e19b      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> local
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< exercise_9
 80013a0:	4b2a      	ldr	r3, [pc, #168]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4927      	ldr	r1, [pc, #156]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80013b0:	4313      	orrs	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x202>
=======
 80016b0:	4b2a      	ldr	r3, [pc, #168]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4927      	ldr	r1, [pc, #156]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e015      	b.n	80016f2 <HAL_RCC_OscConfig+0x202>
>>>>>>> local
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< exercise_9
 80013b6:	4b26      	ldr	r3, [pc, #152]	; (8001450 <HAL_RCC_OscConfig+0x270>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc4c 	bl	8000c58 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc48 	bl	8000c58 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e17a      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1e4>
=======
 80016c6:	4b26      	ldr	r3, [pc, #152]	; (8001760 <HAL_RCC_OscConfig+0x270>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc4c 	bl	8000f68 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc48 	bl	8000f68 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e17a      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> local
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< exercise_9
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d03a      	beq.n	8001464 <HAL_RCC_OscConfig+0x284>
=======
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d03a      	beq.n	8001774 <HAL_RCC_OscConfig+0x284>
>>>>>>> local
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< exercise_9
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d019      	beq.n	800142a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f6:	4b17      	ldr	r3, [pc, #92]	; (8001454 <HAL_RCC_OscConfig+0x274>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fc:	f7ff fc2c 	bl	8000c58 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001404:	f7ff fc28 	bl	8000c58 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e15a      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001416:	4b0d      	ldr	r3, [pc, #52]	; (800144c <HAL_RCC_OscConfig+0x26c>)
 8001418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x224>
=======
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d019      	beq.n	800173a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001706:	4b17      	ldr	r3, [pc, #92]	; (8001764 <HAL_RCC_OscConfig+0x274>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fc2c 	bl	8000f68 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff fc28 	bl	8000f68 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e15a      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_RCC_OscConfig+0x26c>)
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x224>
>>>>>>> local
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< exercise_9
 8001422:	2001      	movs	r0, #1
 8001424:	f000 fa9a 	bl	800195c <RCC_Delay>
 8001428:	e01c      	b.n	8001464 <HAL_RCC_OscConfig+0x284>
=======
 8001732:	2001      	movs	r0, #1
 8001734:	f000 fa9a 	bl	8001c6c <RCC_Delay>
 8001738:	e01c      	b.n	8001774 <HAL_RCC_OscConfig+0x284>
>>>>>>> local
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< exercise_9
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_RCC_OscConfig+0x274>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001430:	f7ff fc12 	bl	8000c58 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001436:	e00f      	b.n	8001458 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fc0e 	bl	8000c58 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d908      	bls.n	8001458 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e140      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	42420000 	.word	0x42420000
 8001454:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	4b9e      	ldr	r3, [pc, #632]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1e9      	bne.n	8001438 <HAL_RCC_OscConfig+0x258>
=======
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_RCC_OscConfig+0x274>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff fc12 	bl	8000f68 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001746:	e00f      	b.n	8001768 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001748:	f7ff fc0e 	bl	8000f68 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d908      	bls.n	8001768 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e140      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
 800175a:	bf00      	nop
 800175c:	40021000 	.word	0x40021000
 8001760:	42420000 	.word	0x42420000
 8001764:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001768:	4b9e      	ldr	r3, [pc, #632]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1e9      	bne.n	8001748 <HAL_RCC_OscConfig+0x258>
>>>>>>> local
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< exercise_9
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	f000 80a6 	beq.w	80015be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	75fb      	strb	r3, [r7, #23]
=======
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 80a6 	beq.w	80018ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]
>>>>>>> local
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< exercise_9
 8001476:	4b97      	ldr	r3, [pc, #604]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10d      	bne.n	800149e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001482:	4b94      	ldr	r3, [pc, #592]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	4a93      	ldr	r2, [pc, #588]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	61d3      	str	r3, [r2, #28]
 800148e:	4b91      	ldr	r3, [pc, #580]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b8e      	ldr	r3, [pc, #568]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d118      	bne.n	80014dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014aa:	4b8b      	ldr	r3, [pc, #556]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a8a      	ldr	r2, [pc, #552]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fbcf 	bl	8000c58 <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014be:	f7ff fbcb 	bl	8000c58 <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b64      	cmp	r3, #100	; 0x64
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e0fd      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d0:	4b81      	ldr	r3, [pc, #516]	; (80016d8 <HAL_RCC_OscConfig+0x4f8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x2de>
=======
 8001786:	4b97      	ldr	r3, [pc, #604]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10d      	bne.n	80017ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001792:	4b94      	ldr	r3, [pc, #592]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a93      	ldr	r2, [pc, #588]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b91      	ldr	r3, [pc, #580]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017aa:	2301      	movs	r3, #1
 80017ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ae:	4b8e      	ldr	r3, [pc, #568]	; (80019e8 <HAL_RCC_OscConfig+0x4f8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d118      	bne.n	80017ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ba:	4b8b      	ldr	r3, [pc, #556]	; (80019e8 <HAL_RCC_OscConfig+0x4f8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a8a      	ldr	r2, [pc, #552]	; (80019e8 <HAL_RCC_OscConfig+0x4f8>)
 80017c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fbcf 	bl	8000f68 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ce:	f7ff fbcb 	bl	8000f68 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b64      	cmp	r3, #100	; 0x64
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0fd      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b81      	ldr	r3, [pc, #516]	; (80019e8 <HAL_RCC_OscConfig+0x4f8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x2de>
>>>>>>> local
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< exercise_9
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d106      	bne.n	80014f2 <HAL_RCC_OscConfig+0x312>
 80014e4:	4b7b      	ldr	r3, [pc, #492]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	4a7a      	ldr	r2, [pc, #488]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6213      	str	r3, [r2, #32]
 80014f0:	e02d      	b.n	800154e <HAL_RCC_OscConfig+0x36e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10c      	bne.n	8001514 <HAL_RCC_OscConfig+0x334>
 80014fa:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	4a75      	ldr	r2, [pc, #468]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001500:	f023 0301 	bic.w	r3, r3, #1
 8001504:	6213      	str	r3, [r2, #32]
 8001506:	4b73      	ldr	r3, [pc, #460]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	4a72      	ldr	r2, [pc, #456]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800150c:	f023 0304 	bic.w	r3, r3, #4
 8001510:	6213      	str	r3, [r2, #32]
 8001512:	e01c      	b.n	800154e <HAL_RCC_OscConfig+0x36e>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	2b05      	cmp	r3, #5
 800151a:	d10c      	bne.n	8001536 <HAL_RCC_OscConfig+0x356>
 800151c:	4b6d      	ldr	r3, [pc, #436]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4a6c      	ldr	r2, [pc, #432]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001522:	f043 0304 	orr.w	r3, r3, #4
 8001526:	6213      	str	r3, [r2, #32]
 8001528:	4b6a      	ldr	r3, [pc, #424]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	6a1b      	ldr	r3, [r3, #32]
 800152c:	4a69      	ldr	r2, [pc, #420]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6213      	str	r3, [r2, #32]
 8001534:	e00b      	b.n	800154e <HAL_RCC_OscConfig+0x36e>
 8001536:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4a66      	ldr	r2, [pc, #408]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	f023 0301 	bic.w	r3, r3, #1
 8001540:	6213      	str	r3, [r2, #32]
 8001542:	4b64      	ldr	r3, [pc, #400]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a63      	ldr	r2, [pc, #396]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001548:	f023 0304 	bic.w	r3, r3, #4
 800154c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d015      	beq.n	8001582 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7ff fb7f 	bl	8000c58 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff fb7b 	bl	8000c58 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	f241 3288 	movw	r2, #5000	; 0x1388
 800156c:	4293      	cmp	r3, r2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e0ab      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001574:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0ee      	beq.n	800155e <HAL_RCC_OscConfig+0x37e>
 8001580:	e014      	b.n	80015ac <HAL_RCC_OscConfig+0x3cc>
=======
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x312>
 80017f4:	4b7b      	ldr	r3, [pc, #492]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80017f6:	6a1b      	ldr	r3, [r3, #32]
 80017f8:	4a7a      	ldr	r2, [pc, #488]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6213      	str	r3, [r2, #32]
 8001800:	e02d      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x334>
 800180a:	4b76      	ldr	r3, [pc, #472]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4a75      	ldr	r2, [pc, #468]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	4b73      	ldr	r3, [pc, #460]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a72      	ldr	r2, [pc, #456]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	e01c      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	2b05      	cmp	r3, #5
 800182a:	d10c      	bne.n	8001846 <HAL_RCC_OscConfig+0x356>
 800182c:	4b6d      	ldr	r3, [pc, #436]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	4a6c      	ldr	r2, [pc, #432]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6213      	str	r3, [r2, #32]
 8001838:	4b6a      	ldr	r3, [pc, #424]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a69      	ldr	r2, [pc, #420]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	e00b      	b.n	800185e <HAL_RCC_OscConfig+0x36e>
 8001846:	4b67      	ldr	r3, [pc, #412]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	4a66      	ldr	r2, [pc, #408]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	6213      	str	r3, [r2, #32]
 8001852:	4b64      	ldr	r3, [pc, #400]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a63      	ldr	r2, [pc, #396]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	f023 0304 	bic.w	r3, r3, #4
 800185c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d015      	beq.n	8001892 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fb7f 	bl	8000f68 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e00a      	b.n	8001884 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fb7b 	bl	8000f68 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	f241 3288 	movw	r2, #5000	; 0x1388
 800187c:	4293      	cmp	r3, r2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e0ab      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001884:	4b57      	ldr	r3, [pc, #348]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ee      	beq.n	800186e <HAL_RCC_OscConfig+0x37e>
 8001890:	e014      	b.n	80018bc <HAL_RCC_OscConfig+0x3cc>
>>>>>>> local
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< exercise_9
 8001582:	f7ff fb69 	bl	8000c58 <HAL_GetTick>
 8001586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001588:	e00a      	b.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800158a:	f7ff fb65 	bl	8000c58 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	f241 3288 	movw	r2, #5000	; 0x1388
 8001598:	4293      	cmp	r3, r2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e095      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a0:	4b4c      	ldr	r3, [pc, #304]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015a2:	6a1b      	ldr	r3, [r3, #32]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1ee      	bne.n	800158a <HAL_RCC_OscConfig+0x3aa>
=======
 8001892:	f7ff fb69 	bl	8000f68 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001898:	e00a      	b.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800189a:	f7ff fb65 	bl	8000f68 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e095      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b0:	4b4c      	ldr	r3, [pc, #304]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	f003 0302 	and.w	r3, r3, #2
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ee      	bne.n	800189a <HAL_RCC_OscConfig+0x3aa>
>>>>>>> local
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< exercise_9
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d105      	bne.n	80015be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015b2:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a47      	ldr	r2, [pc, #284]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]
=======
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c2:	4b48      	ldr	r3, [pc, #288]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	4a47      	ldr	r2, [pc, #284]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018cc:	61d3      	str	r3, [r2, #28]
>>>>>>> local

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< exercise_9
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8081 	beq.w	80016ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c8:	4b42      	ldr	r3, [pc, #264]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 030c 	and.w	r3, r3, #12
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d061      	beq.n	8001698 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d146      	bne.n	800166a <HAL_RCC_OscConfig+0x48a>
=======
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8081 	beq.w	80019da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d8:	4b42      	ldr	r3, [pc, #264]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d061      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d146      	bne.n	800197a <HAL_RCC_OscConfig+0x48a>
>>>>>>> local
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< exercise_9
 80015dc:	4b3f      	ldr	r3, [pc, #252]	; (80016dc <HAL_RCC_OscConfig+0x4fc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fb39 	bl	8000c58 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e8:	e008      	b.n	80015fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ea:	f7ff fb35 	bl	8000c58 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	2b02      	cmp	r3, #2
 80015f6:	d901      	bls.n	80015fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015f8:	2303      	movs	r3, #3
 80015fa:	e067      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f0      	bne.n	80015ea <HAL_RCC_OscConfig+0x40a>
=======
 80018ec:	4b3f      	ldr	r3, [pc, #252]	; (80019ec <HAL_RCC_OscConfig+0x4fc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff fb39 	bl	8000f68 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff fb35 	bl	8000f68 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e067      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	4b35      	ldr	r3, [pc, #212]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x40a>
>>>>>>> local
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< exercise_9
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001610:	d108      	bne.n	8001624 <HAL_RCC_OscConfig+0x444>
=======
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001920:	d108      	bne.n	8001934 <HAL_RCC_OscConfig+0x444>
>>>>>>> local
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< exercise_9
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	492d      	ldr	r1, [pc, #180]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
=======
 8001922:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	492d      	ldr	r1, [pc, #180]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
>>>>>>> local
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< exercise_9
 8001624:	4b2b      	ldr	r3, [pc, #172]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a19      	ldr	r1, [r3, #32]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001634:	430b      	orrs	r3, r1
 8001636:	4927      	ldr	r1, [pc, #156]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x4fc>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fb09 	bl	8000c58 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fb05 	bl	8000c58 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e037      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800165c:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x46a>
 8001668:	e02f      	b.n	80016ca <HAL_RCC_OscConfig+0x4ea>
=======
 8001934:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a19      	ldr	r1, [r3, #32]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	430b      	orrs	r3, r1
 8001946:	4927      	ldr	r1, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194c:	4b27      	ldr	r3, [pc, #156]	; (80019ec <HAL_RCC_OscConfig+0x4fc>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001952:	f7ff fb09 	bl	8000f68 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800195a:	f7ff fb05 	bl	8000f68 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e037      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196c:	4b1d      	ldr	r3, [pc, #116]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x46a>
 8001978:	e02f      	b.n	80019da <HAL_RCC_OscConfig+0x4ea>
>>>>>>> local
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< exercise_9
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_RCC_OscConfig+0x4fc>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff faf2 	bl	8000c58 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff faee 	bl	8000c58 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e020      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x498>
 8001696:	e018      	b.n	80016ca <HAL_RCC_OscConfig+0x4ea>
=======
 800197a:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <HAL_RCC_OscConfig+0x4fc>)
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001980:	f7ff faf2 	bl	8000f68 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001988:	f7ff faee 	bl	8000f68 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e020      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x498>
 80019a6:	e018      	b.n	80019da <HAL_RCC_OscConfig+0x4ea>
>>>>>>> local
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< exercise_9
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e013      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
=======
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	69db      	ldr	r3, [r3, #28]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d101      	bne.n	80019b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e013      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
>>>>>>> local
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< exercise_9
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d106      	bne.n	80016c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_RCC_OscConfig+0x4ec>
=======
 80019b4:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <HAL_RCC_OscConfig+0x4ec>
>>>>>>> local
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< exercise_9
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40007000 	.word	0x40007000
 80016dc:	42420060 	.word	0x42420060

080016e0 <HAL_RCC_ClockConfig>:
=======
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40021000 	.word	0x40021000
 80019e8:	40007000 	.word	0x40007000
 80019ec:	42420060 	.word	0x42420060

080019f0 <HAL_RCC_ClockConfig>:
>>>>>>> local
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< exercise_9
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
=======
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
>>>>>>> local
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< exercise_9
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0d0      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
=======
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0d0      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> local
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< exercise_9
 80016f4:	4b6a      	ldr	r3, [pc, #424]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d910      	bls.n	8001724 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 0207 	bic.w	r2, r3, #7
 800170a:	4965      	ldr	r1, [pc, #404]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	4313      	orrs	r3, r2
 8001710:	600b      	str	r3, [r1, #0]
=======
 8001a04:	4b6a      	ldr	r3, [pc, #424]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d910      	bls.n	8001a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b67      	ldr	r3, [pc, #412]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 0207 	bic.w	r2, r3, #7
 8001a1a:	4965      	ldr	r1, [pc, #404]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
>>>>>>> local

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< exercise_9
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0b8      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001a22:	4b63      	ldr	r3, [pc, #396]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d001      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e0b8      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> local
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< exercise_9
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_ClockConfig+0x92>
=======
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d020      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x92>
>>>>>>> local
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< exercise_9
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800173c:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001746:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001754:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800175e:	6053      	str	r3, [r2, #4]
=======
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0304 	and.w	r3, r3, #4
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a4c:	4b59      	ldr	r3, [pc, #356]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a58      	ldr	r2, [pc, #352]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a64:	4b53      	ldr	r3, [pc, #332]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a52      	ldr	r2, [pc, #328]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a6e:	6053      	str	r3, [r2, #4]
>>>>>>> local
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< exercise_9
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	494d      	ldr	r1, [pc, #308]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	4313      	orrs	r3, r2
 8001770:	604b      	str	r3, [r1, #4]
=======
 8001a70:	4b50      	ldr	r3, [pc, #320]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	494d      	ldr	r1, [pc, #308]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
>>>>>>> local
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< exercise_9
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d040      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
=======
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d040      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x120>
>>>>>>> local
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< exercise_9
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d115      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e07f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b47      	ldr	r3, [pc, #284]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d115      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e07f      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> local
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< exercise_9
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b41      	ldr	r3, [pc, #260]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e073      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	4b41      	ldr	r3, [pc, #260]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e073      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> local
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< exercise_9
 80017ae:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e06b      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b39      	ldr	r3, [pc, #228]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4936      	ldr	r1, [pc, #216]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7ff fa42 	bl	8000c58 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff fa3e 	bl	8000c58 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e053      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf8>
=======
 8001abe:	4b3d      	ldr	r3, [pc, #244]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e06b      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4936      	ldr	r1, [pc, #216]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae0:	f7ff fa42 	bl	8000f68 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff fa3e 	bl	8000f68 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e053      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> local
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< exercise_9
 8001800:	4b27      	ldr	r3, [pc, #156]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 0307 	and.w	r3, r3, #7
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d210      	bcs.n	8001830 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 0207 	bic.w	r2, r3, #7
 8001816:	4922      	ldr	r1, [pc, #136]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
=======
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d210      	bcs.n	8001b40 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f023 0207 	bic.w	r2, r3, #7
 8001b26:	4922      	ldr	r1, [pc, #136]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
>>>>>>> local

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< exercise_9
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e032      	b.n	8001896 <HAL_RCC_ClockConfig+0x1b6>
=======
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e032      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> local
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< exercise_9
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4916      	ldr	r1, [pc, #88]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	4313      	orrs	r3, r2
 800184c:	604b      	str	r3, [r1, #4]
=======
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0304 	and.w	r3, r3, #4
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	4916      	ldr	r1, [pc, #88]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	604b      	str	r3, [r1, #4]
>>>>>>> local
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< exercise_9
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	490e      	ldr	r1, [pc, #56]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	4313      	orrs	r3, r2
 800186c:	604b      	str	r3, [r1, #4]
=======
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0308 	and.w	r3, r3, #8
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d009      	beq.n	8001b7e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	490e      	ldr	r1, [pc, #56]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
>>>>>>> local
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< exercise_9
 800186e:	f000 f821 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 8001872:	4602      	mov	r2, r0
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	490a      	ldr	r1, [pc, #40]	; (80018a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001880:	5ccb      	ldrb	r3, [r1, r3]
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1cc>)
 8001888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_RCC_ClockConfig+0x1d0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff f9a0 	bl	8000bd4 <HAL_InitTick>

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40022000 	.word	0x40022000
 80018a4:	40021000 	.word	0x40021000
 80018a8:	080021d8 	.word	0x080021d8
 80018ac:	20000010 	.word	0x20000010
 80018b0:	20000014 	.word	0x20000014

080018b4 <HAL_RCC_GetSysClockFreq>:
=======
 8001b7e:	f000 f821 	bl	8001bc4 <HAL_RCC_GetSysClockFreq>
 8001b82:	4602      	mov	r2, r0
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	490a      	ldr	r1, [pc, #40]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b90:	5ccb      	ldrb	r3, [r1, r3]
 8001b92:	fa22 f303 	lsr.w	r3, r2, r3
 8001b96:	4a09      	ldr	r2, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1cc>)
 8001b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff f9a0 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40022000 	.word	0x40022000
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	080024e8 	.word	0x080024e8
 8001bbc:	20000018 	.word	0x20000018
 8001bc0:	2000001c 	.word	0x2000001c

08001bc4 <HAL_RCC_GetSysClockFreq>:
>>>>>>> local
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< exercise_9
 80018b4:	b480      	push	{r7}
 80018b6:	b087      	sub	sp, #28
 80018b8:	af00      	add	r7, sp, #0
=======
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
>>>>>>> local
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< exercise_9
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
=======
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
>>>>>>> local
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< exercise_9
 80018ce:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_RCC_GetSysClockFreq+0x94>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 030c 	and.w	r3, r3, #12
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x30>
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x36>
 80018e2:	e027      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x80>
=======
 8001bde:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d002      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x30>
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x36>
 8001bf2:	e027      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x80>
>>>>>>> local
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< exercise_9
 80018e4:	4b19      	ldr	r3, [pc, #100]	; (800194c <HAL_RCC_GetSysClockFreq+0x98>)
 80018e6:	613b      	str	r3, [r7, #16]
      break;
 80018e8:	e027      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x86>
=======
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001bf6:	613b      	str	r3, [r7, #16]
      break;
 8001bf8:	e027      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x86>
>>>>>>> local
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< exercise_9
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	0c9b      	lsrs	r3, r3, #18
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	4a17      	ldr	r2, [pc, #92]	; (8001950 <HAL_RCC_GetSysClockFreq+0x9c>)
 80018f4:	5cd3      	ldrb	r3, [r2, r3]
 80018f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d010      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x70>
=======
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	0c9b      	lsrs	r3, r3, #18
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c04:	5cd3      	ldrb	r3, [r2, r3]
 8001c06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d010      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x70>
>>>>>>> local
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< exercise_9
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_RCC_GetSysClockFreq+0x94>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	0c5b      	lsrs	r3, r3, #17
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_RCC_GetSysClockFreq+0xa0>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	60bb      	str	r3, [r7, #8]
=======
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	0c5b      	lsrs	r3, r3, #17
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	4a11      	ldr	r2, [pc, #68]	; (8001c64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	60bb      	str	r3, [r7, #8]
>>>>>>> local
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< exercise_9
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a0d      	ldr	r2, [pc, #52]	; (800194c <HAL_RCC_GetSysClockFreq+0x98>)
 8001916:	fb02 f203 	mul.w	r2, r2, r3
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e004      	b.n	800192e <HAL_RCC_GetSysClockFreq+0x7a>
=======
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c26:	fb02 f203 	mul.w	r2, r2, r3
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e004      	b.n	8001c3e <HAL_RCC_GetSysClockFreq+0x7a>
>>>>>>> local
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< exercise_9
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a0c      	ldr	r2, [pc, #48]	; (8001958 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	613b      	str	r3, [r7, #16]
      break;
 8001932:	e002      	b.n	800193a <HAL_RCC_GetSysClockFreq+0x86>
=======
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c38:	fb02 f303 	mul.w	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	613b      	str	r3, [r7, #16]
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x86>
>>>>>>> local
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< exercise_9
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <HAL_RCC_GetSysClockFreq+0x98>)
 8001936:	613b      	str	r3, [r7, #16]
      break;
 8001938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800193a:	693b      	ldr	r3, [r7, #16]
}
 800193c:	4618      	mov	r0, r3
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	007a1200 	.word	0x007a1200
 8001950:	080021e8 	.word	0x080021e8
 8001954:	080021f8 	.word	0x080021f8
 8001958:	003d0900 	.word	0x003d0900

0800195c <RCC_Delay>:
=======
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c46:	613b      	str	r3, [r7, #16]
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	693b      	ldr	r3, [r7, #16]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	007a1200 	.word	0x007a1200
 8001c60:	080024f8 	.word	0x080024f8
 8001c64:	08002508 	.word	0x08002508
 8001c68:	003d0900 	.word	0x003d0900

08001c6c <RCC_Delay>:
>>>>>>> local
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< exercise_9
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <RCC_Delay+0x34>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <RCC_Delay+0x38>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	0a5b      	lsrs	r3, r3, #9
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001978:	bf00      	nop
  }
  while (Delay --);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	60fa      	str	r2, [r7, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f9      	bne.n	8001978 <RCC_Delay+0x1c>
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000010 	.word	0x20000010
 8001994:	10624dd3 	.word	0x10624dd3

08001998 <HAL_TIM_Base_Init>:
=======
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <RCC_Delay+0x34>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <RCC_Delay+0x38>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0a5b      	lsrs	r3, r3, #9
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c88:	bf00      	nop
  }
  while (Delay --);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	60fa      	str	r2, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f9      	bne.n	8001c88 <RCC_Delay+0x1c>
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000018 	.word	0x20000018
 8001ca4:	10624dd3 	.word	0x10624dd3

08001ca8 <HAL_TIM_Base_Init>:
>>>>>>> local
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< exercise_9
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e041      	b.n	8001a2e <HAL_TIM_Base_Init+0x96>
=======
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e041      	b.n	8001d3e <HAL_TIM_Base_Init+0x96>
>>>>>>> local
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< exercise_9
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d106      	bne.n	80019c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> local
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< exercise_9
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff f820 	bl	8000a04 <HAL_TIM_Base_MspInit>
=======
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7ff f820 	bl	8000d14 <HAL_TIM_Base_MspInit>
>>>>>>> local
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< exercise_9
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3304      	adds	r3, #4
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f000 fa6e 	bl	8001eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_TIM_Base_Start_IT>:
=======
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 fa6e 	bl	80021c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_TIM_Base_Start_IT>:
>>>>>>> local
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< exercise_9
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
=======
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
>>>>>>> local

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< exercise_9
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d001      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e035      	b.n	8001abc <HAL_TIM_Base_Start_IT+0x84>
=======
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d001      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e035      	b.n	8001dcc <HAL_TIM_Base_Start_IT+0x84>
>>>>>>> local
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< exercise_9
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2202      	movs	r2, #2
 8001a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <HAL_TIM_Base_Start_IT+0x90>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d009      	beq.n	8001a86 <HAL_TIM_Base_Start_IT+0x4e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a7a:	d004      	beq.n	8001a86 <HAL_TIM_Base_Start_IT+0x4e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a12      	ldr	r2, [pc, #72]	; (8001acc <HAL_TIM_Base_Start_IT+0x94>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d111      	bne.n	8001aaa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b06      	cmp	r3, #6
 8001a96:	d010      	beq.n	8001aba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa8:	e007      	b.n	8001aba <HAL_TIM_Base_Start_IT+0x82>
=======
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a16      	ldr	r2, [pc, #88]	; (8001dd8 <HAL_TIM_Base_Start_IT+0x90>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d009      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x4e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8a:	d004      	beq.n	8001d96 <HAL_TIM_Base_Start_IT+0x4e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a12      	ldr	r2, [pc, #72]	; (8001ddc <HAL_TIM_Base_Start_IT+0x94>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d111      	bne.n	8001dba <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b06      	cmp	r3, #6
 8001da6:	d010      	beq.n	8001dca <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db8:	e007      	b.n	8001dca <HAL_TIM_Base_Start_IT+0x82>
>>>>>>> local
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< exercise_9
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0201 	orr.w	r2, r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]
=======
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0201 	orr.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]
>>>>>>> local
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< exercise_9
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40000400 	.word	0x40000400

08001ad0 <HAL_TIM_IRQHandler>:
=======
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bc80      	pop	{r7}
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40000400 	.word	0x40000400

08001de0 <HAL_TIM_IRQHandler>:
>>>>>>> local
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< exercise_9
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d122      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d11b      	bne.n	8001b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0202 	mvn.w	r2, #2
 8001afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x4a>
=======
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d122      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0202 	mvn.w	r2, #2
 8001e0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_TIM_IRQHandler+0x4a>
>>>>>>> local
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< exercise_9
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f9b4 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0x56>
=======
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f9b4 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 8001e28:	e005      	b.n	8001e36 <HAL_TIM_IRQHandler+0x56>
>>>>>>> local
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< exercise_9
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f9a7 	bl	8001e6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f9b6 	bl	8001e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
=======
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f9a7 	bl	800217e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f9b6 	bl	80021a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
>>>>>>> local
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< exercise_9
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d122      	bne.n	8001b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b04      	cmp	r3, #4
 8001b46:	d11b      	bne.n	8001b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0204 	mvn.w	r2, #4
 8001b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0x9e>
=======
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f003 0304 	and.w	r3, r3, #4
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d122      	bne.n	8001e90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d11b      	bne.n	8001e90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f06f 0204 	mvn.w	r2, #4
 8001e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_TIM_IRQHandler+0x9e>
>>>>>>> local
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< exercise_9
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f98a 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0xaa>
=======
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f98a 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 8001e7c:	e005      	b.n	8001e8a <HAL_TIM_IRQHandler+0xaa>
>>>>>>> local
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< exercise_9
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f97d 	bl	8001e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f98c 	bl	8001e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
=======
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f97d 	bl	800217e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f98c 	bl	80021a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	771a      	strb	r2, [r3, #28]
>>>>>>> local
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< exercise_9
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d122      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0308 	and.w	r3, r3, #8
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0208 	mvn.w	r2, #8
 8001ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2204      	movs	r2, #4
 8001baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0xf2>
=======
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d122      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	2b08      	cmp	r3, #8
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0208 	mvn.w	r2, #8
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2204      	movs	r2, #4
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	69db      	ldr	r3, [r3, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> local
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< exercise_9
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f960 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0xfe>
=======
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f960 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0xfe>
>>>>>>> local
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< exercise_9
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f953 	bl	8001e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f962 	bl	8001e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
=======
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f953 	bl	800217e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f962 	bl	80021a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
>>>>>>> local
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< exercise_9
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0310 	and.w	r3, r3, #16
 8001bde:	2b10      	cmp	r3, #16
 8001be0:	d122      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0310 	and.w	r3, r3, #16
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d11b      	bne.n	8001c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0210 	mvn.w	r2, #16
 8001bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x146>
=======
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d122      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f003 0310 	and.w	r3, r3, #16
 8001efc:	2b10      	cmp	r3, #16
 8001efe:	d11b      	bne.n	8001f38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f06f 0210 	mvn.w	r2, #16
 8001f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x146>
>>>>>>> local
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< exercise_9
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f936 	bl	8001e80 <HAL_TIM_IC_CaptureCallback>
 8001c14:	e005      	b.n	8001c22 <HAL_TIM_IRQHandler+0x152>
=======
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f936 	bl	8002190 <HAL_TIM_IC_CaptureCallback>
 8001f24:	e005      	b.n	8001f32 <HAL_TIM_IRQHandler+0x152>
>>>>>>> local
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< exercise_9
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f929 	bl	8001e6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f938 	bl	8001e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	771a      	strb	r2, [r3, #28]
=======
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f929 	bl	800217e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f938 	bl	80021a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	771a      	strb	r2, [r3, #28]
>>>>>>> local
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< exercise_9
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d10e      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d107      	bne.n	8001c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0201 	mvn.w	r2, #1
 8001c4c:	611a      	str	r2, [r3, #16]
=======
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d10e      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d107      	bne.n	8001f64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0201 	mvn.w	r2, #1
 8001f5c:	611a      	str	r2, [r3, #16]
>>>>>>> local
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< exercise_9
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7fe fe90 	bl	8000974 <HAL_TIM_PeriodElapsedCallback>
=======
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7fe fe80 	bl	8000c64 <HAL_TIM_PeriodElapsedCallback>
>>>>>>> local
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< exercise_9
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c5e:	2b80      	cmp	r3, #128	; 0x80
 8001c60:	d10e      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6c:	2b80      	cmp	r3, #128	; 0x80
 8001c6e:	d107      	bne.n	8001c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c78:	611a      	str	r2, [r3, #16]
=======
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	2b80      	cmp	r3, #128	; 0x80
 8001f70:	d10e      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7c:	2b80      	cmp	r3, #128	; 0x80
 8001f7e:	d107      	bne.n	8001f90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f88:	611a      	str	r2, [r3, #16]
>>>>>>> local
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< exercise_9
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 fa6b 	bl	8002156 <HAL_TIMEx_BreakCallback>
=======
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fa6b 	bl	8002466 <HAL_TIMEx_BreakCallback>
>>>>>>> local
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< exercise_9
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d10e      	bne.n	8001cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c98:	2b40      	cmp	r3, #64	; 0x40
 8001c9a:	d107      	bne.n	8001cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ca4:	611a      	str	r2, [r3, #16]
=======
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f9a:	2b40      	cmp	r3, #64	; 0x40
 8001f9c:	d10e      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b40      	cmp	r3, #64	; 0x40
 8001faa:	d107      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fb4:	611a      	str	r2, [r3, #16]
>>>>>>> local
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< exercise_9
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f8fc 	bl	8001ea4 <HAL_TIM_TriggerCallback>
=======
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8fc 	bl	80021b4 <HAL_TIM_TriggerCallback>
>>>>>>> local
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< exercise_9
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	d10e      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b20      	cmp	r3, #32
 8001cc6:	d107      	bne.n	8001cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0220 	mvn.w	r2, #32
 8001cd0:	611a      	str	r2, [r3, #16]
=======
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b20      	cmp	r3, #32
 8001fd6:	d107      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0220 	mvn.w	r2, #32
 8001fe0:	611a      	str	r2, [r3, #16]
>>>>>>> local
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< exercise_9
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa36 	bl	8002144 <HAL_TIMEx_CommutCallback>
=======
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fa36 	bl	8002454 <HAL_TIMEx_CommutCallback>
>>>>>>> local
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< exercise_9
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_TIM_ConfigClockSource>:
=======
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_TIM_ConfigClockSource>:
>>>>>>> local
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< exercise_9
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	73fb      	strb	r3, [r7, #15]
=======
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
>>>>>>> local
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< exercise_9
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_TIM_ConfigClockSource+0x1c>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e0b4      	b.n	8001e66 <HAL_TIM_ConfigClockSource+0x186>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_TIM_ConfigClockSource+0x1c>
 8002008:	2302      	movs	r3, #2
 800200a:	e0b4      	b.n	8002176 <HAL_TIM_ConfigClockSource+0x186>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2201      	movs	r2, #1
 8002010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> local

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< exercise_9
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d34:	d03e      	beq.n	8001db4 <HAL_TIM_ConfigClockSource+0xd4>
 8001d36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d3a:	f200 8087 	bhi.w	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d42:	f000 8086 	beq.w	8001e52 <HAL_TIM_ConfigClockSource+0x172>
 8001d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d4a:	d87f      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d4c:	2b70      	cmp	r3, #112	; 0x70
 8001d4e:	d01a      	beq.n	8001d86 <HAL_TIM_ConfigClockSource+0xa6>
 8001d50:	2b70      	cmp	r3, #112	; 0x70
 8001d52:	d87b      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d54:	2b60      	cmp	r3, #96	; 0x60
 8001d56:	d050      	beq.n	8001dfa <HAL_TIM_ConfigClockSource+0x11a>
 8001d58:	2b60      	cmp	r3, #96	; 0x60
 8001d5a:	d877      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d5c:	2b50      	cmp	r3, #80	; 0x50
 8001d5e:	d03c      	beq.n	8001dda <HAL_TIM_ConfigClockSource+0xfa>
 8001d60:	2b50      	cmp	r3, #80	; 0x50
 8001d62:	d873      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d64:	2b40      	cmp	r3, #64	; 0x40
 8001d66:	d058      	beq.n	8001e1a <HAL_TIM_ConfigClockSource+0x13a>
 8001d68:	2b40      	cmp	r3, #64	; 0x40
 8001d6a:	d86f      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d6c:	2b30      	cmp	r3, #48	; 0x30
 8001d6e:	d064      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x15a>
 8001d70:	2b30      	cmp	r3, #48	; 0x30
 8001d72:	d86b      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d74:	2b20      	cmp	r3, #32
 8001d76:	d060      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x15a>
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d867      	bhi.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d05c      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x15a>
 8001d80:	2b10      	cmp	r3, #16
 8001d82:	d05a      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0x15a>
 8001d84:	e062      	b.n	8001e4c <HAL_TIM_ConfigClockSource+0x16c>
=======
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800202a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002044:	d03e      	beq.n	80020c4 <HAL_TIM_ConfigClockSource+0xd4>
 8002046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800204a:	f200 8087 	bhi.w	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800204e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002052:	f000 8086 	beq.w	8002162 <HAL_TIM_ConfigClockSource+0x172>
 8002056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205a:	d87f      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b70      	cmp	r3, #112	; 0x70
 800205e:	d01a      	beq.n	8002096 <HAL_TIM_ConfigClockSource+0xa6>
 8002060:	2b70      	cmp	r3, #112	; 0x70
 8002062:	d87b      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 8002064:	2b60      	cmp	r3, #96	; 0x60
 8002066:	d050      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x11a>
 8002068:	2b60      	cmp	r3, #96	; 0x60
 800206a:	d877      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b50      	cmp	r3, #80	; 0x50
 800206e:	d03c      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0xfa>
 8002070:	2b50      	cmp	r3, #80	; 0x50
 8002072:	d873      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 8002074:	2b40      	cmp	r3, #64	; 0x40
 8002076:	d058      	beq.n	800212a <HAL_TIM_ConfigClockSource+0x13a>
 8002078:	2b40      	cmp	r3, #64	; 0x40
 800207a:	d86f      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800207c:	2b30      	cmp	r3, #48	; 0x30
 800207e:	d064      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002080:	2b30      	cmp	r3, #48	; 0x30
 8002082:	d86b      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 8002084:	2b20      	cmp	r3, #32
 8002086:	d060      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002088:	2b20      	cmp	r3, #32
 800208a:	d867      	bhi.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
 800208c:	2b00      	cmp	r3, #0
 800208e:	d05c      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002090:	2b10      	cmp	r3, #16
 8002092:	d05a      	beq.n	800214a <HAL_TIM_ConfigClockSource+0x15a>
 8002094:	e062      	b.n	800215c <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> local
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< exercise_9
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	6899      	ldr	r1, [r3, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	f000 f95e 	bl	8002056 <TIM_ETR_SetConfig>
=======
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	6899      	ldr	r1, [r3, #8]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f000 f95e 	bl	8002366 <TIM_ETR_SetConfig>
>>>>>>> local
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< exercise_9
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001da8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	609a      	str	r2, [r3, #8]
      break;
 8001db2:	e04f      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
=======
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	609a      	str	r2, [r3, #8]
      break;
 80020c2:	e04f      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> local
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< exercise_9
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6818      	ldr	r0, [r3, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6899      	ldr	r1, [r3, #8]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f000 f947 	bl	8002056 <TIM_ETR_SetConfig>
=======
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f000 f947 	bl	8002366 <TIM_ETR_SetConfig>
>>>>>>> local
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< exercise_9
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dd6:	609a      	str	r2, [r3, #8]
      break;
 8001dd8:	e03c      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
=======
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689a      	ldr	r2, [r3, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e6:	609a      	str	r2, [r3, #8]
      break;
 80020e8:	e03c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> local

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< exercise_9
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6859      	ldr	r1, [r3, #4]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	461a      	mov	r2, r3
 8001de8:	f000 f8be 	bl	8001f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2150      	movs	r1, #80	; 0x50
 8001df2:	4618      	mov	r0, r3
 8001df4:	f000 f915 	bl	8002022 <TIM_ITRx_SetConfig>
      break;
 8001df8:	e02c      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
=======
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6859      	ldr	r1, [r3, #4]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	461a      	mov	r2, r3
 80020f8:	f000 f8be 	bl	8002278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2150      	movs	r1, #80	; 0x50
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f915 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 8002108:	e02c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> local

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< exercise_9
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	6859      	ldr	r1, [r3, #4]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	461a      	mov	r2, r3
 8001e08:	f000 f8dc 	bl	8001fc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2160      	movs	r1, #96	; 0x60
 8001e12:	4618      	mov	r0, r3
 8001e14:	f000 f905 	bl	8002022 <TIM_ITRx_SetConfig>
      break;
 8001e18:	e01c      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
=======
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	6859      	ldr	r1, [r3, #4]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	461a      	mov	r2, r3
 8002118:	f000 f8dc 	bl	80022d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2160      	movs	r1, #96	; 0x60
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f905 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 8002128:	e01c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> local

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< exercise_9
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	6859      	ldr	r1, [r3, #4]
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	461a      	mov	r2, r3
 8001e28:	f000 f89e 	bl	8001f68 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	4618      	mov	r0, r3
 8001e34:	f000 f8f5 	bl	8002022 <TIM_ITRx_SetConfig>
      break;
 8001e38:	e00c      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
=======
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	461a      	mov	r2, r3
 8002138:	f000 f89e 	bl	8002278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2140      	movs	r1, #64	; 0x40
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f8f5 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 8002148:	e00c      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> local
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< exercise_9
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4619      	mov	r1, r3
 8001e44:	4610      	mov	r0, r2
 8001e46:	f000 f8ec 	bl	8002022 <TIM_ITRx_SetConfig>
      break;
 8001e4a:	e003      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
=======
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4619      	mov	r1, r3
 8002154:	4610      	mov	r0, r2
 8002156:	f000 f8ec 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 800215a:	e003      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> local
    }

    default:
      status = HAL_ERROR;
<<<<<<< exercise_9
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8001e50:	e000      	b.n	8001e54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <HAL_TIM_OC_DelayElapsedCallback>:
=======
 800215c:	2301      	movs	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
      break;
 8002160:	e000      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002174:	7bfb      	ldrb	r3, [r7, #15]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> local
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< exercise_9
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
=======
 800217e:	b480      	push	{r7}
 8002180:	b083      	sub	sp, #12
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
>>>>>>> local
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< exercise_9
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIM_IC_CaptureCallback>:
=======
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> local
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< exercise_9
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
=======
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
>>>>>>> local
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< exercise_9
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bc80      	pop	{r7}
 8001e90:	4770      	bx	lr

08001e92 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> local
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< exercise_9
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
=======
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
>>>>>>> local
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< exercise_9
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr

08001ea4 <HAL_TIM_TriggerCallback>:
=======
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_TIM_TriggerCallback>:
>>>>>>> local
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< exercise_9
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
=======
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
>>>>>>> local
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< exercise_9
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
	...

08001eb8 <TIM_Base_SetConfig>:
=======
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
	...

080021c8 <TIM_Base_SetConfig>:
>>>>>>> local
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< exercise_9
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a25      	ldr	r2, [pc, #148]	; (8001f60 <TIM_Base_SetConfig+0xa8>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d007      	beq.n	8001ee0 <TIM_Base_SetConfig+0x28>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ed6:	d003      	beq.n	8001ee0 <TIM_Base_SetConfig+0x28>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <TIM_Base_SetConfig+0xac>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d108      	bne.n	8001ef2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a1a      	ldr	r2, [pc, #104]	; (8001f60 <TIM_Base_SetConfig+0xa8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d007      	beq.n	8001f0a <TIM_Base_SetConfig+0x52>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f00:	d003      	beq.n	8001f0a <TIM_Base_SetConfig+0x52>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <TIM_Base_SetConfig+0xac>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d108      	bne.n	8001f1c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
=======
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a25      	ldr	r2, [pc, #148]	; (8002270 <TIM_Base_SetConfig+0xa8>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d007      	beq.n	80021f0 <TIM_Base_SetConfig+0x28>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e6:	d003      	beq.n	80021f0 <TIM_Base_SetConfig+0x28>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a22      	ldr	r2, [pc, #136]	; (8002274 <TIM_Base_SetConfig+0xac>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d108      	bne.n	8002202 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a1a      	ldr	r2, [pc, #104]	; (8002270 <TIM_Base_SetConfig+0xa8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <TIM_Base_SetConfig+0x52>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d003      	beq.n	800221a <TIM_Base_SetConfig+0x52>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a17      	ldr	r2, [pc, #92]	; (8002274 <TIM_Base_SetConfig+0xac>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d108      	bne.n	800222c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
>>>>>>> local
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< exercise_9
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a07      	ldr	r2, [pc, #28]	; (8001f60 <TIM_Base_SetConfig+0xa8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d103      	bne.n	8001f50 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
=======
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a07      	ldr	r2, [pc, #28]	; (8002270 <TIM_Base_SetConfig+0xa8>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d103      	bne.n	8002260 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> local
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< exercise_9
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	615a      	str	r2, [r3, #20]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	40012c00 	.word	0x40012c00
 8001f64:	40000400 	.word	0x40000400

08001f68 <TIM_TI1_ConfigInputStage>:
=======
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	615a      	str	r2, [r3, #20]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	40012c00 	.word	0x40012c00
 8002274:	40000400 	.word	0x40000400

08002278 <TIM_TI1_ConfigInputStage>:
>>>>>>> local
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< exercise_9
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
=======
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
>>>>>>> local
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< exercise_9
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	f023 0201 	bic.w	r2, r3, #1
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f023 030a 	bic.w	r3, r3, #10
 8001fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	621a      	str	r2, [r3, #32]
}
 8001fba:	bf00      	nop
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bc80      	pop	{r7}
 8001fc2:	4770      	bx	lr

08001fc4 <TIM_TI2_ConfigInputStage>:
=======
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f023 0201 	bic.w	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 030a 	bic.w	r3, r3, #10
 80022b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	621a      	str	r2, [r3, #32]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <TIM_TI2_ConfigInputStage>:
>>>>>>> local
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< exercise_9
 8001fc4:	b480      	push	{r7}
 8001fc6:	b087      	sub	sp, #28
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
=======
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
>>>>>>> local
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< exercise_9
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f023 0210 	bic.w	r2, r3, #16
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	031b      	lsls	r3, r3, #12
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002000:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	621a      	str	r2, [r3, #32]
}
 8002018:	bf00      	nop
 800201a:	371c      	adds	r7, #28
 800201c:	46bd      	mov	sp, r7
 800201e:	bc80      	pop	{r7}
 8002020:	4770      	bx	lr

08002022 <TIM_ITRx_SetConfig>:
=======
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	f023 0210 	bic.w	r2, r3, #16
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	031b      	lsls	r3, r3, #12
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002310:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	621a      	str	r2, [r3, #32]
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <TIM_ITRx_SetConfig>:
>>>>>>> local
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< exercise_9
 8002022:	b480      	push	{r7}
 8002024:	b085      	sub	sp, #20
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
=======
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
>>>>>>> local
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< exercise_9
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002038:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	f043 0307 	orr.w	r3, r3, #7
 8002044:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	609a      	str	r2, [r3, #8]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <TIM_ETR_SetConfig>:
=======
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	f043 0307 	orr.w	r3, r3, #7
 8002354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	609a      	str	r2, [r3, #8]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <TIM_ETR_SetConfig>:
>>>>>>> local
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< exercise_9
 8002056:	b480      	push	{r7}
 8002058:	b087      	sub	sp, #28
 800205a:	af00      	add	r7, sp, #0
 800205c:	60f8      	str	r0, [r7, #12]
 800205e:	60b9      	str	r1, [r7, #8]
 8002060:	607a      	str	r2, [r7, #4]
 8002062:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002070:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	021a      	lsls	r2, r3, #8
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	431a      	orrs	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4313      	orrs	r3, r2
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	4313      	orrs	r3, r2
 8002082:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	609a      	str	r2, [r3, #8]
}
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	bc80      	pop	{r7}
 8002092:	4770      	bx	lr

08002094 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8002366:	b480      	push	{r7}
 8002368:	b087      	sub	sp, #28
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002380:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	021a      	lsls	r2, r3, #8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4313      	orrs	r3, r2
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	609a      	str	r2, [r3, #8]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> local
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< exercise_9
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
=======
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
>>>>>>> local
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< exercise_9
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e041      	b.n	8002130 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a14      	ldr	r2, [pc, #80]	; (800213c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d009      	beq.n	8002104 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f8:	d004      	beq.n	8002104 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a10      	ldr	r2, [pc, #64]	; (8002140 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d10c      	bne.n	800211e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800210a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	4313      	orrs	r3, r2
 8002114:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	609a      	str	r2, [r3, #8]
=======
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e041      	b.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d009      	beq.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d004      	beq.n	8002414 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d10c      	bne.n	800242e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800241a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	68ba      	ldr	r2, [r7, #8]
 8002422:	4313      	orrs	r3, r2
 8002424:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	609a      	str	r2, [r3, #8]
>>>>>>> local
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< exercise_9
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40012c00 	.word	0x40012c00
 8002140:	40000400 	.word	0x40000400

08002144 <HAL_TIMEx_CommutCallback>:
=======
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	bc80      	pop	{r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	40012c00 	.word	0x40012c00
 8002450:	40000400 	.word	0x40000400

08002454 <HAL_TIMEx_CommutCallback>:
>>>>>>> local
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< exercise_9
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
=======
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
>>>>>>> local
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< exercise_9
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <HAL_TIMEx_BreakCallback>:
=======
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr

08002466 <HAL_TIMEx_BreakCallback>:
>>>>>>> local
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< exercise_9
 8002156:	b480      	push	{r7}
 8002158:	b083      	sub	sp, #12
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
=======
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
>>>>>>> local
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< exercise_9
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <__libc_init_array>:
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	2600      	movs	r6, #0
 800216c:	4d0c      	ldr	r5, [pc, #48]	; (80021a0 <__libc_init_array+0x38>)
 800216e:	4c0d      	ldr	r4, [pc, #52]	; (80021a4 <__libc_init_array+0x3c>)
 8002170:	1b64      	subs	r4, r4, r5
 8002172:	10a4      	asrs	r4, r4, #2
 8002174:	42a6      	cmp	r6, r4
 8002176:	d109      	bne.n	800218c <__libc_init_array+0x24>
 8002178:	f000 f822 	bl	80021c0 <_init>
 800217c:	2600      	movs	r6, #0
 800217e:	4d0a      	ldr	r5, [pc, #40]	; (80021a8 <__libc_init_array+0x40>)
 8002180:	4c0a      	ldr	r4, [pc, #40]	; (80021ac <__libc_init_array+0x44>)
 8002182:	1b64      	subs	r4, r4, r5
 8002184:	10a4      	asrs	r4, r4, #2
 8002186:	42a6      	cmp	r6, r4
 8002188:	d105      	bne.n	8002196 <__libc_init_array+0x2e>
 800218a:	bd70      	pop	{r4, r5, r6, pc}
 800218c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002190:	4798      	blx	r3
 8002192:	3601      	adds	r6, #1
 8002194:	e7ee      	b.n	8002174 <__libc_init_array+0xc>
 8002196:	f855 3b04 	ldr.w	r3, [r5], #4
 800219a:	4798      	blx	r3
 800219c:	3601      	adds	r6, #1
 800219e:	e7f2      	b.n	8002186 <__libc_init_array+0x1e>
 80021a0:	080021fc 	.word	0x080021fc
 80021a4:	080021fc 	.word	0x080021fc
 80021a8:	080021fc 	.word	0x080021fc
 80021ac:	08002200 	.word	0x08002200

080021b0 <memset>:
 80021b0:	4603      	mov	r3, r0
 80021b2:	4402      	add	r2, r0
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d100      	bne.n	80021ba <memset+0xa>
 80021b8:	4770      	bx	lr
 80021ba:	f803 1b01 	strb.w	r1, [r3], #1
 80021be:	e7f9      	b.n	80021b4 <memset+0x4>

080021c0 <_init>:
 80021c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021c2:	bf00      	nop
 80021c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021c6:	bc08      	pop	{r3}
 80021c8:	469e      	mov	lr, r3
 80021ca:	4770      	bx	lr

080021cc <_fini>:
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ce:	bf00      	nop
 80021d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d2:	bc08      	pop	{r3}
 80021d4:	469e      	mov	lr, r3
 80021d6:	4770      	bx	lr
=======
 800246e:	bf00      	nop
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <__libc_init_array>:
 8002478:	b570      	push	{r4, r5, r6, lr}
 800247a:	2600      	movs	r6, #0
 800247c:	4d0c      	ldr	r5, [pc, #48]	; (80024b0 <__libc_init_array+0x38>)
 800247e:	4c0d      	ldr	r4, [pc, #52]	; (80024b4 <__libc_init_array+0x3c>)
 8002480:	1b64      	subs	r4, r4, r5
 8002482:	10a4      	asrs	r4, r4, #2
 8002484:	42a6      	cmp	r6, r4
 8002486:	d109      	bne.n	800249c <__libc_init_array+0x24>
 8002488:	f000 f822 	bl	80024d0 <_init>
 800248c:	2600      	movs	r6, #0
 800248e:	4d0a      	ldr	r5, [pc, #40]	; (80024b8 <__libc_init_array+0x40>)
 8002490:	4c0a      	ldr	r4, [pc, #40]	; (80024bc <__libc_init_array+0x44>)
 8002492:	1b64      	subs	r4, r4, r5
 8002494:	10a4      	asrs	r4, r4, #2
 8002496:	42a6      	cmp	r6, r4
 8002498:	d105      	bne.n	80024a6 <__libc_init_array+0x2e>
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	f855 3b04 	ldr.w	r3, [r5], #4
 80024a0:	4798      	blx	r3
 80024a2:	3601      	adds	r6, #1
 80024a4:	e7ee      	b.n	8002484 <__libc_init_array+0xc>
 80024a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80024aa:	4798      	blx	r3
 80024ac:	3601      	adds	r6, #1
 80024ae:	e7f2      	b.n	8002496 <__libc_init_array+0x1e>
 80024b0:	0800250c 	.word	0x0800250c
 80024b4:	0800250c 	.word	0x0800250c
 80024b8:	0800250c 	.word	0x0800250c
 80024bc:	08002510 	.word	0x08002510

080024c0 <memset>:
 80024c0:	4603      	mov	r3, r0
 80024c2:	4402      	add	r2, r0
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d100      	bne.n	80024ca <memset+0xa>
 80024c8:	4770      	bx	lr
 80024ca:	f803 1b01 	strb.w	r1, [r3], #1
 80024ce:	e7f9      	b.n	80024c4 <memset+0x4>

080024d0 <_init>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr

080024dc <_fini>:
 80024dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024de:	bf00      	nop
 80024e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024e2:	bc08      	pop	{r3}
 80024e4:	469e      	mov	lr, r3
 80024e6:	4770      	bx	lr
>>>>>>> local
